#!/usr/bin/perl
use strict;
use warnings;
use YAML::XS qw(LoadFile);
use DBI;
use List::MoreUtils qw(uniq);
use FindBin qw($Bin);
use lib $FindBin::Bin . '/../lib';
use Format;
use Utils;
use Analyse;
use List::MoreUtils qw(uniq);

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Parametres pour l'analyse
my $gc_max = $config->{'apriori'}{'gc_max'};
my $nb_occ_max = $config->{'apriori'}{'nb_occ_max'};
my $seuil_dabg = $config->{'apriori'}{'seuil_dabg'};
my $nb_sondes_min_ase = $config->{'apriori'}{'nb_sondes_min_ase'};
my $nb_sondes_min_flanquants = $config->{'apriori'}{'nb_sondes_min_flanquants'};

# ==============================================================================
# On récupère les infos de l'exp
# ==============================================================================

# On se connecte a elexir
my $dbh = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

# On récupère les infos de l'analyse
my $analyse = Analyse->get_analyse($dbh, $id_analyse);

# Message d'erreur si l'analyse n'existe pas
die('L\'id de l\'analyse n\'est pas valide.') if(!$analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($analyse->{'type'} ne 'apriori'){

	die('Le script apriori ne fonctionne que sur les analyses apriori :o)');

}

# ==============================================================================
# On crée les noms de table dont on a besoin
# ==============================================================================

my $id_projet = $analyse->{'id_project'};
my $type_chips = $analyse->{'type_chips'};
my $version = $analyse->{'version'};
my $orga = $analyse->{'organism'};
my $paire = $analyse->{'paired'};
my $nb_paires_rep = $analyse->{'nb_paires_rep'};

my $table_entites_a_priori = $config->{'table_entites_a_priori'}{$version}{$orga};
my $table_sondes = $config->{'table_sondes_entites_a_priori'}{$type_chips}{$version}{$orga};
my $table_dabg = get_table_dabg($id_projet);
my $table_intensites = get_table_intensites($id_projet);
my $table_ase_apriori = get_table_ase_a_priori($id_projet, $id_analyse);

# ==============================================================================
# On prépare les requètes avec ces infos
# ==============================================================================

# On selectionne les ase
my $select_entites_a_priori_sth = $dbh->prepare(
	"SELECT id, id_gene, type FROM $table_entites_a_priori"
);

# On selectionne les sondes de l'entité a priori
my $select_infos_sondes_sth = $dbh->prepare(
	"SELECT id_probe, gc_content, nb_occ, groupe, side
	FROM " . $table_sondes . "
	WHERE id_entite = ?"
);

# On selectionne le dabg d'une sonde
my $select_dabg_sth = $dbh->prepare(
	"SELECT * FROM " . $table_dabg . " WHERE probe_id = ?"
);

# On selectionne l'intensité d'une sonde
my $select_intensite_sth = $dbh->prepare(
	"SELECT * FROM " . $table_intensites . " WHERE probe_id = ?"
);

# ==============================================================================
# On crée la table qui contient les valeurs des gène
# ==============================================================================

my @fields_si = ();

for(my $i = 0; $i < $nb_paires_rep; $i++){

	push(@fields_si, 'SI' . ($i + 1));

}

my @fields_ase = ();

push(@fields_ase, 'id_entite INT UNSIGNED NOT NULL PRIMARY KEY');
push(@fields_ase, 'id_gene INT UNSIGNED NOT NULL');
push(@fields_ase, (map { $_ . ' DECIMAL(10,5) UNSIGNED NOT NULL'; } @fields_si)) if $paire;
push(@fields_ase, 'SI DECIMAL(10,5) UNSIGNED NOT NULL');
push(@fields_ase, 'SI_pval DECIMAL(12,10) UNSIGNED NOT NULL');
push(@fields_ase, 'nb_sondes_inclusion SMALLINT UNSIGNED NOT NULL');
push(@fields_ase, 'nb_sondes_exclusion SMALLINT UNSIGNED NOT NULL');

$dbh->do('DROP TABLE IF EXISTS ' . $table_ase_apriori);
$dbh->do('CREATE TABLE ' . $table_ase_apriori . ' (' . join(', ', @fields_ase) . ')');

my $insert_ase_sth = $dbh->prepare(
	"INSERT INTO $table_ase_apriori VALUES(" . join(', ', ('?')x@fields_ase) . ")"
);

# ==============================================================================
# On début l'algo, pour chaque ase
# ==============================================================================

# On selectionne les gènes
$select_entites_a_priori_sth->execute;

# Pour chaque gène
while(my $entite = $select_entites_a_priori_sth->fetchrow_hashref){

	# ======================================================================
	# On récupère les sondes de chaque exon
	# ======================================================================

	# On récupère les infos des sondes
	$select_infos_sondes_sth->execute($entite->{'id'});
	my $infos_sondes = $select_infos_sondes_sth->fetchall_hashref('id_probe');
	$select_infos_sondes_sth->finish;

	# On vire celles qui ont moins de 2 gc content car on a pas pu calculer
	# leur dabg
	my $ids_sondes_dabg = [grep {
		$infos_sondes->{$_}->{'gc_content'} > 2
	} keys %{$infos_sondes}];

	# On récupère les sondes qui ont de bonnes caractéristiques
	my $ids_sondes_ok = [grep {
		$infos_sondes->{$_}->{'gc_content'} <= $gc_max
		and
		$infos_sondes->{$_}->{'nb_occ'} <= $nb_occ_max
	} @{$ids_sondes_dabg}];

	# On récupère les sondes de chaque groupe
	my $ids_sondes_inclusions = [grep {
		$infos_sondes->{$_}->{'groupe'} eq 'inclusion'
	} @{$ids_sondes_dabg}];

	my $ids_sondes_exclusions_5prime = [grep {
		$infos_sondes->{$_}->{'groupe'} eq 'exclusion'
		and
		$infos_sondes->{$_}->{'side'} eq '5prime'
	} @{$ids_sondes_dabg}];

	my $ids_sondes_exclusions_3prime = [grep {
		$infos_sondes->{$_}->{'groupe'} eq 'exclusion'
		and
		$infos_sondes->{$_}->{'side'} eq '3prime'
	} @{$ids_sondes_dabg}];

	# On récupère les sondes exprimées pour les inclusions
	my $ref_sondes_inclusions_raw = $analyse->get_sondes_exprimees(
		$dbh,
		$ids_sondes_inclusions,
		$seuil_dabg,
		1, # au niveau de l'entité
	);

	next if(@{$ref_sondes_inclusions_raw} == 0);

	my $ref_sondes_inclusions = [];

	foreach my $id_sonde (@{$ids_sondes_ok}){

		my @sondes = grep {
			$id_sonde == $_->{'probe_id'}
		} @{$ref_sondes_inclusions_raw};

		push(@{$ref_sondes_inclusions}, $sondes[0]) if(@sondes > 0);

	}

	next if(@{$ref_sondes_inclusions} < $nb_sondes_min_ase);

	# On récupère les sondes exprimées pour les exclusions
	my $ref_sondes_exclusions_5prime_raw = $analyse->get_sondes_exprimees(
		$dbh,
		$ids_sondes_exclusions_5prime,
		$seuil_dabg,
		1, # au niveau de l'entité
		1 # dans les deux conditions
	);

	my $ref_sondes_exclusions_3prime_raw = $analyse->get_sondes_exprimees(
		$dbh,
		$ids_sondes_exclusions_3prime,
		$seuil_dabg,
		1, # au niveau de l'entité
		1 # dans les deux conditions
	);

	next if(@{$ref_sondes_exclusions_5prime_raw} == 0 and @{$ref_sondes_exclusions_3prime_raw} == 0);
	next if($entite->{'type'} eq 'ASE' and @{$ref_sondes_exclusions_5prime_raw} == 0);
	next if($entite->{'type'} eq 'ASE' and @{$ref_sondes_exclusions_3prime_raw} == 0);

	my $ref_sondes_exclusions_5prime = [];

	foreach my $id_sonde (@{$ids_sondes_ok}){

		my @sondes = grep {
			$id_sonde == $_->{'probe_id'}
		} @{$ref_sondes_exclusions_5prime_raw};

		push(@{$ref_sondes_exclusions_5prime}, $sondes[0]) if(@sondes > 0);

	}

	my $ref_sondes_exclusions_3prime = [];

	foreach my $id_sonde (@{$ids_sondes_ok}){

		my @sondes = grep {
			$id_sonde == $_->{'probe_id'}
		} @{$ref_sondes_exclusions_3prime_raw};

		push(@{$ref_sondes_exclusions_3prime}, $sondes[0]) if(@sondes > 0);

	}

	next if(@{$ref_sondes_exclusions_5prime} < $nb_sondes_min_ase and @{$ref_sondes_exclusions_3prime} < $nb_sondes_min_ase);
	next if($entite->{'type'} eq 'ASE' and @{$ref_sondes_exclusions_5prime} < $nb_sondes_min_ase);
	next if($entite->{'type'} eq 'ASE' and @{$ref_sondes_exclusions_3prime} < $nb_sondes_min_ase);

	# On mixe exclusion 5' et exclusion 3'
	my $ref_sondes_exclusions = [
		@{$ref_sondes_exclusions_5prime},
		@{$ref_sondes_exclusions_3prime}
	];

	my $nb_sondes_inclusions = @{$ref_sondes_inclusions};
	my $nb_sondes_exclusions = @{$ref_sondes_exclusions};

	# ======================================================================
	# On calcule le SI
	# ======================================================================

	# On récupère les FCs des sondes
	my $ref_fcs_inclusions = $analyse->fcs_sondes($ref_sondes_inclusions);
	my $ref_fcs_exclusions = $analyse->fcs_sondes($ref_sondes_exclusions);

	# On récupère le Si des sondes
	my $ref_SIs_sondes = $analyse->sis_sondes(
		[rep_effect($ref_fcs_exclusions)],
		$ref_fcs_inclusions
	);

	# On calcule le SI de l'entité
	my($SI, $pvalue, @SIs) = $analyse->si_entite($ref_SIs_sondes);

	# ======================================================================
	# On insert l'ase
	# ======================================================================

	my @values = ();

	push(@values, $entite->{'id'});
	push(@values, $entite->{'id_gene'});
	push(@values, @SIs) if $paire;
	push(@values, $SI);
	push(@values, $pvalue);
	push(@values, $nb_sondes_inclusions);
	push(@values, $nb_sondes_exclusions);

	$insert_ase_sth->execute(@values);

}
