#!/usr/bin/python
# -*- coding: UTF-8 -*-
import os
import sys
import threading
import time
import datetime
import MySQLdb
import subprocess

# =============================================================================
# On définit des constantes
# =============================================================================

# Nombre de threads en même temps
NBTHREADS = 2

# Base de données
HOST	= 'localhost'
USER	= 'elexir2'
PASSWD	= 'pandas'
DBNAME	= 'elexir2'

# Répertoire dans lequel vit le daemon
WORKDIR = '/'

# Umask (?!)
UMASK = 0

# Nombre maximum de descripteur de fichiers
MAXFD = 1024

# On défini vers quelle sortie doivent être rédirigé les descripteur de fichiers
if(hasattr(os, "devnull")):
	REDIRECT_TO = os.devnull
else:
	REDIRECT_TO = "/dev/null"

# =============================================================================
# Procédure permettant de daemoniser le script
# =============================================================================

def daemonize():

	# =============================================================================
	# On crée le processus
	# =============================================================================

	# On fork un premier child
	try:
		pid = os.fork()
	except OSError, e:
		raise Exception, "%s [%d]" % (e.strerror, e.errno)

	# Si on en est au parent
	if(pid > 0):
		# On exit le parent
		os._exit(0)
	else:
		# On attribue un session_id
		os.setsid()

		# On fork un deuxième child
		try:
			pid = os.fork()
		except OSError, e:
			raise Exception, "%s [%d]" % (e.strerror, e.errno)

		# Si on en est au premier child
		if(pid > 0):
			# On exit le premier child
			os._exit(0)

		else:
			# On set le working_dir et le umask du daemon
			os.chdir(WORKDIR)
			os.umask(UMASK)

	# =============================================================================
	# On ferme les descripteurs de fichiers
	# =============================================================================

	import resource

	# On récupère le nombre maximum de descripteur de fichier ouvrable sur la machine
	maxfd = resource.getrlimit(resource.RLIMIT_NOFILE)[1]

	# Si on peut en ouvrir une infinité, on utilise la valeur définie
	if(maxfd == resource.RLIM_INFINITY):
		maxfd = MAXFD
  
	# On ferme les descripteurs de fichiers de 0 à maxfd
	for fd in range(0, maxfd):
		try:
			os.close(fd)
		except OSError:
			pass

	# =============================================================================
	# On rédirige les sorties standards vers la sortie définie
	# =============================================================================

	os.open(REDIRECT_TO, os.O_RDWR)
	os.dup2(0, 1)
	os.dup2(0, 2)

# =============================================================================
# Fonction retournant la date/heure actuelle
# =============================================================================

def now():
	return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S");

# =============================================================================
# Fonction 
# =============================================================================

def do_job(job, sema):
	sema.acquire()

	id_job = job[0];

	if(job[3] == 'qc'):
		id_analyse = job[1]
		algo = 'qc'
	if(job[3] == 'preprocessing'):
		id_analyse = job[1]
		algo = 'correction'
	if(job[3] == 'paire'):
		id_analyse = job[2]
		algo = 'simple/all'
	if(job[3] == 'impaire'):
		id_analyse = job[2]
		algo = 'simple/all'

	dbh = MySQLdb.connect(host = HOST, user = USER, passwd = PASSWD, db = DBNAME)
	cursor = dbh.cursor()
	cursor.execute('UPDATE jobs SET status = %(status)s, start = %(date)s WHERE id = %(id)s', {'id':id_job, 'status':'processing', 'date':now()})

	subprocess.call(['/home/pierre/workspace/analyses/' + algo, str(id_analyse)])

	cursor.execute('UPDATE jobs SET status = %(status)s, end = %(date)s WHERE id = %(id)s', {'id':id_job, 'status':'done', 'date':now()})
	cursor.close
	dbh.close

	sema.release()

# =============================================================================
# Script / boucle infinie
# =============================================================================

'''daemonize()'''

while(1):
	try:

		dbh = MySQLdb.connect(host = HOST, user = USER, passwd = PASSWD, db = DBNAME)

		sema = threading.Semaphore(NBTHREADS);

		while(1):
			cursor = dbh.cursor()
			cursor.execute('SELECT id, id_project, id_analysis, type FROM jobs WHERE status = %(status)s', {'status':'waiting'})
			jobs = cursor.fetchall()

			for job in jobs:
				thread = threading.Thread(target = do_job, args = (job, sema))
				thread.start()
				print thread

			time.sleep(5)
	except:
		pass
