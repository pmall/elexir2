#!/usr/bin/perl
use warnings;
use strict;
use YAML::XS qw(LoadFile);
use DBI;
use File::Path qw(make_path);
use Spreadsheet::WriteExcel;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../lib";
use Format;
use Math;
use Analyse::RequetesCourantes;
use Traitement_resultats::FonctionsXls;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Paramètres de sélection pour les résulats
my $seuil_epissage = $config->{'simple'}{'excel'}{'seuil_epissage'};
my $seuil_pval = $config->{'simple'}{'excel'}{'seuil_pval'};
my $seuil_fiabilite_fcGene = $config->{'simple'}{'excel'}{'seuil_fc_gene'};

# Répertoire de sortie 
my $dir_xls = $config->{'dir_xls'};

# ==============================================================================
# Connection à elexir et préparation des requetes
# ==============================================================================

my $dbh_elexir = DBI->connect(
	"DBI:mysql:" . $db_name . ":" . $db_host,
	$db_user,
	$db_pass
);

# On selectionne les infos de l'analyse
my $select_infos_analyse_sth = $dbh_elexir->prepare(
	"SELECT a.id_project, a.name, p.organism, p.type as type_chips,
	a.version, a.type
	FROM projects AS p, analyses AS a
	WHERE a.id_project = p.id
	AND a.id = ?"
);

# ==============================================================================
# On récupère les infos de l'analyse
# ==============================================================================

$select_infos_analyse_sth->execute($id_analyse);

my $infos_analyse = $select_infos_analyse_sth->fetchrow_hashref;

die('L\'id de l\'analyse n\'est pas valide.') if(!$infos_analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($infos_analyse->{'type'} ne 'simple'){

	die('Le script simple ne fonctionne que sur les analyses simples :o)');

}

# ==============================================================================
# On récupère les infos dont on a besoin selon les infos de l'analyse
# ==============================================================================

# On récupère les infos de la bdd
my $id_projet = $infos_analyse->{"id_project"};
my $version = $infos_analyse->{'version'};
my $orga = $infos_analyse->{'organism'};
my $name = $infos_analyse->{'name'};
my $type_chips = $infos_analyse->{'type_chips'};

# on crée les variables du script qui déendent de l'analyse
my $base_fasterdb = $config->{'db_name_fasterdb'}{$version}{$orga};
my $table_trans = get_table_transcription($id_projet, $id_analyse);
my $table_splicing = get_table_splicing($id_projet, $id_analyse);
my $table_entites = $config->{'table_entites'}{$version}{$orga};
my $dir_sortie = $dir_xls . '/' . $id_projet . '/' . $id_analyse;
my $fichier_sortie = $dir_sortie . '/' . $name . '_epissage.xls';

# On crée les dossier
make_path($dir_sortie);

# ==============================================================================
# On se connecte a fasterdb
# ==============================================================================

my $dbh_fasterdb = DBI->connect(
	"DBI:mysql:" . $base_fasterdb . ":" . $db_host,
	$db_user,
	$db_pass
);

my $select_entites_nofdr_sth = $dbh_elexir->prepare(
	"SELECT * FROM $table_splicing
	WHERE ABS(LOG2(SI)) >= LOG2(?) AND is_robust = 1"
);

my $select_entites_fdr_sth = $dbh_elexir->prepare(
	"SELECT *,
	SI_adjp AS SI_pval, SIsd_adjp AS SIsd_pval, psi_adjp AS psi_pval
	FROM $table_splicing
	WHERE ABS(LOG2(SI)) >= LOG2(?) AND is_robust = 1"
);

my $select_infos_gene_sth = $dbh_fasterdb->prepare(
	"SELECT id, stable_id_ensembl, official_symbol, description,
	chromosome, start_sur_chromosome, end_sur_chromosome, strand
	FROM genes
	WHERE id = ?"
);

my $select_orthologues_sth = $dbh_fasterdb->prepare(
	"SELECT genes_humains, genes_souris
	FROM genes_orthologues
	WHERE genes_humains = ? OR genes_souris = ?"
);

my $select_valeurs_gene_sth = $dbh_elexir->prepare(
	"SELECT epi_fc, epi_pval FROM $table_trans WHERE gene_id = ?"
);

my $select_infos_entite_sth = $dbh_elexir->prepare(
	"SELECT type, exon_pos, start_sur_gene, end_sur_gene
	FROM $table_entites
	WHERE id = ?"
);

# ==============================================================================
# Initialisation fichier excel
# ==============================================================================

# Fichier
my $resultat			= Spreadsheet::WriteExcel->new($fichier_sortie);

# Feuilles
my $f_resume			= $resultat->add_worksheet('Parametres et entites analysees');
my $f_epissage_no_fdr		= $resultat->add_worksheet('NO FDR');
my $f_epissage_fdr		= $resultat->add_worksheet('FDR');

# Couleurs
my $couleur_entete		= $resultat->set_custom_color(39, 189, 189, 189);

# Formats
my $format_resume_titre		= $resultat->add_format(color => 'black', bold => 1, center_across => 1);
my $format_resume_intermediaire	= $resultat->add_format(color => 'black', italic => 1, center_across => 1);
my $format_resume_cell		= $resultat->add_format(color => 'black', bold => 0, center_across => 1);
my $format_merge_entete		= $resultat->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_entete		= $resultat->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_cell			= $resultat->add_format(color => 'black', border => 1, border_color => 'black', center_across => 1);
my $format_cell_mauv_fc		= $resultat->add_format(color => 'red', border => 1, border_color => 'black', center_across => 1);
my $format_cell_no_center	= $resultat->add_format(color => 'black', bold => 0);

# ==============================================================================
# Feuille résumé
# ==============================================================================

# Infos de base
$f_resume->write(0, 0, date(), $format_cell_no_center);
$f_resume->write(2, 0, "Parametres utilises", $format_resume_titre);
$f_resume->write(3, 0, "Seuil fold", $format_resume_titre);
$f_resume->write(3, 1, round($seuil_epissage, 2), $format_resume_titre);
$f_resume->write(4, 0, "Seuil p-value", $format_resume_titre);
$f_resume->write(4, 1, $seuil_pval, $format_resume_titre);

# ==============================================================================
# On ajoute les entités dans les feuilles
# ==============================================================================

my @entites = ();

# On selectionne les entites no fdr
$select_entites_nofdr_sth->execute($seuil_epissage);
@entites = @{$select_entites_nofdr_sth->fetchall_arrayref({})};
$select_entites_nofdr_sth->finish;

my($nb_nofdr_up, $nb_nofdr_down) = write_list(
	$f_epissage_no_fdr,
	$format_entete,
	$format_cell,
	$format_cell_mauv_fc,
	$seuil_pval,
	$seuil_fiabilite_fcGene,
	@entites
);

# On selectionne les entites fdr
$select_entites_fdr_sth->execute($seuil_epissage);
@entites = @{$select_entites_fdr_sth->fetchall_arrayref({})};
$select_entites_fdr_sth->finish;

my($nb_fdr_up, $nb_fdr_down) = write_list(
	$f_epissage_no_fdr,
	$format_entete,
	$format_cell,
	$format_cell_mauv_fc,
	$seuil_pval,
	$seuil_fiabilite_fcGene,
	@entites
);

# ==============================================================================
# Fonction pour remplir la feuille
# ==============================================================================

sub write_list{

	my($f, $format_entete, $format_cell, $format_cell_mauv_fc, $seuil_pval, $seuil_fiabilite_fcGene, @entites) = @_;

	my $i = 0;
	my $nb_gene = 0;
	my $gene_id_prec = 0;
	my $nb_ups = 0;
	my $nb_downs = 0;

	# On défini les entetes
	my @entetes = (
		'Gene',
		'SI',
		'SIsd',
		'Psi',
		'Fasterdb id',
		'Link Misea',
		'Symbol',
		'Name',
		'Human Ensembl id',
		'Mouse Ensembl id',
		'Chr Position',
		'Regulation',
		'FC',
		'Pvalue',
		'AS Event Type',
		'Exon position',
		'Nb probes analysed',
		'AS Event Sequence',
		'Regulation',
		'Med SI',
		'Pvalue',
		'Regulation',
		'Med SIsd',
		'Pvalue',
		'Regulation',
		'Med Psi Control',
		'sd Med Psi Control',
		'Med Psi Test',
		'sd Med Psi Test',
		'Med Psi FC',
		'sd Med Psi FC',
		'Pvalue'
	);

	for(my $j = 0; $j < @entetes; $j++){

		$f->write(0, $j, $entetes[$j], $format_entete);

	}

	# Fonction qui retourne 1 si l'entité est valide pour les trois types
	sub commun{

		my($entite, $seuil_pval) = @_;

		return(
			$entite->{'SI_pval'} <= $seuil_pval
			&&
			$entite->{'SIsd_pval'} <= $seuil_pval
			&&
			$entite->{'psi_pval'} <= $seuil_pval
		);

	}

	# Fonction qui retourne 1 si l'entité est valide pour les trois types
	sub format_ratio{

		my($value) = @_;

		return ($value >= 1) ? $value : 1/$value;

	}

	# On classe les entites
	@entites = sort {
		# On classe déjà les communs en premier
		commun($b, $seuil_pval) <=> commun($a, $seuil_pval)
		||
		# Ensuite par SI
		format_ratio($b->{'SI'}) <=> format_ratio($a->{'SI'})
	} @entites;

	# Pour chaque entité
	foreach my $entite (@entites){

		# On test si il y en a au moins un
		my $SI_ok = $entite->{'SI_pval'} <= $seuil_pval;
		my $SIsd_ok = $entite->{'SIsd_pval'} <= $seuil_pval;
		my $psi_ok = $entite->{'psi_pval'} <= $seuil_pval;

		# On zappe si il n'y en a pas au moins un
		next if(!$SI_ok and !$SIsd_ok and !$psi_ok);

		$i++;

		# On récupère les valeurs du gène
		$select_valeurs_gene_sth->execute($entite->{'gene_id'});
		my $gene = $select_valeurs_gene_sth->fetchrow_hashref;
		$select_valeurs_gene_sth->finish;

		# On récupère les infos du gène
		$select_infos_gene_sth->execute($entite->{'gene_id'});
		my $infos_gene = $select_infos_gene_sth->fetchrow_hashref;
		$select_infos_gene_sth->finish;

		# On selectionne les gènes orthologues
		$select_orthologues_sth->execute($infos_gene->{'stable_id_ensembl'}, $infos_gene->{'stable_id_ensembl'});
		my $orthologues = $select_orthologues_sth->fetchall_arrayref({});
		$select_orthologues_sth->finish;

		# On récupère les infos de l'entité
		$select_infos_entite_sth->execute($entite->{'id_entite'});
		my $infos_entite = $select_infos_entite_sth->fetchrow_hashref;
		$select_infos_entite_sth->finish;

		# On met a jour le numéro du gène
		if($infos_gene->{'id'} != $gene_id_prec){

			$nb_gene++;

			$gene_id_prec = $infos_gene->{'id'};

		}

		# On compte les up et les down
		($entite->{'SI'} >= 1) ? $nb_ups++ : $nb_downs++;

		# On formatte les infos
		my @orth_humain = map { $_->{'genes_humains'} } @{$orthologues};
		my @orth_souris = map { $_->{'genes_souris'} } @{$orthologues};

		if($infos_analyse->{'organism'} eq 'human'){

			push(@orth_humain, $infos_gene->{'stable_id_ensembl'});

		}else{

			push(@orth_souris, $infos_gene->{'stable_id_ensembl'});

		}

		my $orth_humain = join(', ', @orth_humain);
		my $orth_souris = join(', ', @orth_souris);

		my $strand = ($infos_gene->{'strand'} eq '1') ? '+' : '-';

		my $pos_chrom =
			$infos_gene->{'chromosome'} .
			':' . $infos_gene->{'start_sur_chromosome'} .
			'-' . $infos_gene->{'end_sur_chromosome'} .
			':' . $strand;

		my $reg_gene = ($gene->{'epi_fc'} >= 1) ? 'up' : 'down';

		my $reg_SI = ($entite->{'SI'} >= 1) ? 'up' : 'down';
		my $reg_SIsd = ($entite->{'SIsd'} >= 1) ? 'up' : 'down';
		my $reg_psi = ($entite->{'psi_fc'} >= 1) ? 'up' : 'down';

		my $format = (format_ratio($gene->{'epi_fc'}) <= $seuil_fiabilite_fcGene)
			? $format_cell
			: $format_cell_mauv_fc;

		# On crée le tableau de data
		my @data = (
			$nb_gene,
			($SI_ok) ? 'X' : '',
			($SIsd_ok) ? 'X' : '',
			($psi_ok) ? 'X' : '',
			$entite->{'gene_id'},
			'',
			$infos_gene->{'official_symbol'},
			$infos_gene->{'description'},
			$orth_humain,
			$orth_souris,
			$pos_chrom,
			$reg_gene,
			format_ratio($gene->{'epi_fc'}),
			$gene->{'epi_pval'},
			$infos_entite->{'type'},
			$infos_entite->{'exon_pos'},
			$entite->{'nb_sondes'},
			'seq',
			$reg_SI,
			format_ratio($entite->{'SI'}),
			$entite->{'SI_pval'},
			$reg_SIsd,
			format_ratio($entite->{'SIsd'}),
			$entite->{'SIsd_pval'},
			$reg_psi,
			$entite->{'psi_control'},
			$entite->{'psi_sd_control'},
			$entite->{'psi_test'},
			$entite->{'psi_sd_test'},
			$entite->{'psi_fc'},
			$entite->{'psi_sd_fc'},
			$entite->{'psi_pval'}
		);

		# On affiche les data
		for(my $j = 0; $j < @data; $j++){

			# $i + 1 parce que la premiere ligne est l'entete
			$f->write($i, $j, $data[$j], $format);

		}

	}

}
