#!/usr/bin/perl
use strict;
use warnings;
use YAML::XS qw(LoadFile);
use DBI;
use List::MoreUtils qw(uniq);
use FindBin qw($Bin);
use lib $FindBin::Bin . '/../lib';
use Format;
use Math;
use Utils;
use Stats;
use Analyse;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Parametres pour l'analyse
my $gc_max = $config->{'simple'}{'gc_max'};
my $nb_occ_max = $config->{'simple'}{'nb_occ_max'};
my $seuil_dabg = $config->{'simple'}{'seuil_dabg'};
my $nb_sondes_min_entite = $config->{'simple'}{'nb_sondes_min_entite'};
my $seuil_si_robust = $config->{'simple'}{'seuil_si_robust'};

# ==============================================================================
# Préparation des requètes pour les infos du projet
# ==============================================================================

# On se connecte a elexir
my $dbh = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

# On récupère les infos de l'analyse
my $analyse = Analyse->get_analyse($dbh, $id_analyse);

# Message d'erreur si l'analyse n'existe pas
die('L\'id de l\'analyse n\'est pas valide.') if(!$analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($analyse->{'type'} ne 'simple'){

	die('Le script simple ne fonctionne que sur les analyses simples :o)');

}

# ==============================================================================
# On crée les noms de table dont on a besoin
# ==============================================================================

my $id_projet = $analyse->{'id_project'};
my $type_chips = $analyse->{'type_chips'};
my $version = $analyse->{'version'};
my $orga = $analyse->{'organism'};
my $paire = $analyse->{'paired'};
my $nb_paires_rep = $analyse->{'nb_paires_rep'};

my $table_entites = $config->{'table_entites'}{$version}{$orga};
my $table_sondes = $config->{'table_sondes'}{$type_chips}{$version}{$orga};
my $table_dabg = get_table_dabg($id_projet);
my $table_intensites = get_table_intensites($id_projet);
my $table_trans = get_table_transcription($id_projet, $id_analyse);
my $table_splicing = get_table_splicing($id_projet, $id_analyse);

# ==============================================================================
# On prépare les requete sur elexir pour l'analyse avec ces infos
# ==============================================================================

# On selectionne les gènes qui ont un fc épissage
my $select_genes_sth = $dbh->prepare(
	"SELECT * FROM " . $table_trans . " WHERE epi_fc1 IS NOT NULL"
);

# On selectionne les entités codantes d'un gène
my $select_entites_sth = $dbh->prepare(
	"SELECT id FROM " . $table_entites . "
	WHERE id_gene = ? AND type != 'intron'"
);

# On selectionne les sondes d'un gène
my $select_infos_sondes_sth = $dbh->prepare(
	"SELECT probe_id, nb_occ, gc_content, exon_pos, entite_id, entite_type
	FROM " . $table_sondes . "
	WHERE entite_id = ?
	AND utiliser_dans_analyse = 1"
);

# On selectionne le dabg d'une sonde
my $select_dabg_sth = $dbh->prepare(
	"SELECT * FROM " . $table_dabg . " WHERE probe_id = ?"
);

# On selectionne l'intensité d'une sonde
my $select_intensite_sth = $dbh->prepare(
	"SELECT * FROM " . $table_intensites . " WHERE probe_id = ?"
);

# ==============================================================================
# On crée dynamiquement la table
# ==============================================================================

my @fields_expr = ();
my @fields_SIs = ();
my @fields_SIsds = ();

for(my $i = 0; $i < $nb_paires_rep; $i++){

	push(@fields_expr, 'control' . ($i + 1));
	push(@fields_expr, 'test' . ($i + 1));
	push(@fields_SIs, 'SI' . ($i + 1));
	push(@fields_SIsds, 'SIsd' . ($i + 1));

}

my @fields_splicing = ();

push(@fields_splicing, 'id_entite INT UNSIGNED NOT NULL PRIMARY KEY');
push(@fields_splicing, 'id_gene INT UNSIGNED NOT NULL');
push(@fields_splicing, (map { $_ . ' DECIMAL(10,5) UNSIGNED NOT NULL'; } @fields_expr));
push(@fields_splicing, (map { $_ . ' DECIMAL(10,5) UNSIGNED NOT NULL' } @fields_SIs)) if($paire);
push(@fields_splicing, 'SI DECIMAL(10,5) UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_pval DECIMAL(12,10) UNSIGNED NOT NULL');
push(@fields_splicing, 'psi_control DECIMAL(15,5) UNSIGNED NOT NULL');
push(@fields_splicing, 'psi_sd_control DECIMAL(15,5) UNSIGNED NOT NULL') if($paire);
push(@fields_splicing, 'psi_test DECIMAL(15,5) UNSIGNED NOT NULL');
push(@fields_splicing, 'psi_sd_test DECIMAL(15,5) UNSIGNED NOT NULL') if($paire);
push(@fields_splicing, 'psi_fc DECIMAL(15,5) UNSIGNED NOT NULL');
push(@fields_splicing, 'psi_sd_fc DECIMAL(15,5) UNSIGNED NOT NULL') if($paire);
push(@fields_splicing, 'psi_pval DECIMAL(12,10) UNSIGNED NOT NULL') if($paire);
push(@fields_splicing, 'nb_sondes SMALLINT UNSIGNED NOT NULL');

$dbh->do('DROP TABLE IF EXISTS ' . $table_splicing);
$dbh->do('CREATE TABLE ' . $table_splicing . ' (' . join(', ', @fields_splicing) . ', INDEX (id_gene))');

my $insert_entite_sth = $dbh->prepare(
	"INSERT INTO $table_splicing VALUES(" . join(', ', ('?')x@fields_splicing) . ")"
);

# ==============================================================================
# Début de l'algo, on analyse les gènes avec un fc épissage
# ==============================================================================

# On selectionne les gènes
$select_genes_sth->execute;

# Pour chaque gène
while(my $gene = $select_genes_sth->fetchrow_hashref){

	# ======================================================================
	# On calcule les entités du gène
	# ======================================================================

	# On selectionne les entités du gène
	$select_entites_sth->execute($gene->{'id_gene'});

	# Pour chaque entité du gène
	while(my $entite = $select_entites_sth->fetchrow_hashref){

		# ==============================================================
		# On selectionne les sondes
		# ==============================================================

		# On récupère les infos des sondes de l'entité
		$select_infos_sondes_sth->execute($entite->{'id'});
		my $infos_sondes = $select_infos_sondes_sth->fetchall_hashref('probe_id');
		$select_infos_sondes_sth->finish;

		# Si on a pas 3 sondes on zappe
		next if(scalar(keys %{$infos_sondes}) < $nb_sondes_min_entite);

		# On vire les sondes qui ont pas les bonnes caractéristiques
		my $ids_sondes_ok = [grep {
			# ON VIRE LES SONDES AVEC UN GC <= 2 PARCE QU'ON A PAS PU
			# CALCULER LEUR DABG AVEC APT :((
			$infos_sondes->{$_}->{'gc_content'} > 2
			and
			$infos_sondes->{$_}->{'nb_occ'} <= $nb_occ_max
			and
			$infos_sondes->{$_}->{'gc_content'} <= $gc_max
		} keys %{$infos_sondes}];

		# Si on a pas 3 sondes on zappe
		next if(@{$ids_sondes_ok} < $nb_sondes_min_entite);

		# On récupère les infos des sondes exprimées
		my $ref_sondes = $analyse->get_sondes_exprimees(
			$dbh,
			$ids_sondes_ok,
			$seuil_dabg
		);

		# On récupère le nombre de sondes
		my $nb_sondes = @{$ref_sondes};

		# Si il n'y a pas trois sondes exprimées on zappe
		next if($nb_sondes < $nb_sondes_min_entite);

		# ==============================================================
		# On calcule le SI des sondes
		# ==============================================================

		# On récupère les fcs du gène
		my @fcs_gene = ();

		for(my $i = 0; $i < $nb_paires_rep; $i++){

			push(@fcs_gene, $gene->{'epi_fc' . ($i + 1)});

		}

		# On récupère les SIs des sondes
		my $ref_SIs_sondes = $analyse->sis_sondes(
			\@fcs_gene,
			$analyse->fcs_sondes($ref_sondes)
		);

		# ==============================================================
		# On calcule si l'entité est "cohérente", on zappe si non
		# ==============================================================

		my $is_robust = is_robust(
			[map { median(@{$_}) } @{$ref_SIs_sondes}],
			$seuil_si_robust,
			(1/$seuil_si_robust)
		);

		# Si l'entité n'est pas cohérente on zappe
		next if(!$is_robust);

		# ==============================================================
		# On calcule le SI de l'entité
		# ==============================================================

		my($SI, $SI_pval, @SIs) = $analyse->si_entite($ref_SIs_sondes);

		# ==============================================================
		# On calcule le PSI de l'entité
		# ==============================================================

		# On calcule l'expression de l'entité
		my @expr = $analyse->expressions($ref_sondes);

		# On initialise les valeurs du psi
		my $psi_control;
		my $psi_test;
		my $psi_sd_control;
		my $psi_sd_test;
		my $psi_fc;
		my $psi_sd_fc;
		my $psi_pval;

		# on récupère les fcs psis de chaque paire de replicat
		my @psis_control = ();
		my @psis_test = ();
		my @psis_fcs = ();

		# Pour chaque paire de replicat
		for(my $i = 0; $i < $nb_paires_rep; $i++){

			# On récupère les indexs des champs expr control et test
			my $index_cont = $i * 2;
			my $index_test = ($i * 2) + 1;

			# On calcule le psi control et le psi test, et le psi fc
			my $psi_control = 100 * ($expr[$index_cont]/$gene->{'control' . ($i + 1)});
			my $psi_test = 100 * ($expr[$index_test]/$gene->{'test' . ($i + 1)});
			my $psi_fc = $psi_test/$psi_control;

			# On les ajoute à la liste
			push(@psis_control, $psi_control);
			push(@psis_test, $psi_test);
			push(@psis_fcs, $psi_fc);

		}

		# On calcule le psi control, le psi test et le psi fc
		$psi_control = median(@psis_control);
		$psi_test = median(@psis_test);
		$psi_fc = median(@psis_fcs);

		# On calcule certains trucs seulement si l'analyse est paire
		if($paire){

			# On calcule les sd des psi control, psi test et psi fc
			$psi_sd_control = sd(@psis_control);
			$psi_sd_test = sd(@psis_test);
			$psi_sd_fc = sd(@psis_fcs);

			# test stat
			$psi_pval = ttest(
				[log2(@psis_fcs)],
				(log2($psi_fc) >= 0)
			);

		}

		# ==============================================================
		# On ajoute l'entité dans la table
		# ==============================================================

		my @values = ();

		push(@values, $entite->{'id'});
		push(@values, $gene->{'id_gene'});
		push(@values, @expr);
		push(@values, @SIs) if($paire);
		push(@values, $SI);
		push(@values, $SI_pval);
		push(@values, $psi_control);
		push(@values, $psi_sd_control) if($paire);
		push(@values, $psi_test);
		push(@values, $psi_sd_test) if($paire);
		push(@values, $psi_fc);
		push(@values, $psi_sd_fc) if($paire);
		push(@values, $psi_pval) if($paire);
		push(@values, $nb_sondes);

		$insert_entite_sth->execute(@values);

	}

	# On termine la requète pour les entités
	$select_entites_sth->finish;

}
