#!/usr/bin/perl
use warnings;
use strict;
use YAML::XS qw(LoadFile);
use DBI;
use File::Path qw(make_path);
use Spreadsheet::WriteExcel;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../lib";
use Format;
use Math;
use Analyse;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Paramètres de sélection pour les résulats
my $seuil_trans = $config->{'simple'}{'excel'}{'seuil_trans'};
my $seuil_pval = $config->{'simple'}{'excel'}{'seuil_pval'};

# Répertoire de sortie 
my $dir_xls = $config->{'dir_xls'};

# ==============================================================================
# On récupère les infos de l'analyse
# ==============================================================================

my $dbh = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

my $analyse = Analyse->get_analyse($dbh, $id_analyse);

die('L\'id de l\'analyse n\'est pas valide.') if(!$analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($analyse->{'type'} ne 'simple'){

	die('Le script simple ne fonctionne que sur les analyses simples :o)');

}

# ==============================================================================
# On récupère les infos dont on a besoin selon les infos de l'analyse
# ==============================================================================

# On récupère les infos de la bdd
my $id_projet = $analyse->{"id_project"};
my $type_chips = $analyse->{'type_chips'};
my $version = $analyse->{'version'};
my $orga = $analyse->{'organism'};
my $name = $analyse->{'name'};

# on crée les variables du script qui déendent de l'analyse
my $table_genes = $config->{'table_genes'}{$version}{$orga};
my $table_trans = get_table_transcription($id_projet, $id_analyse);
my $dir_sortie = $dir_xls . '/' . $id_projet . '/' . $id_analyse;
my $fichier_sortie = $dir_sortie . '/' . $name . '_transcription.xls';

# On crée le répertoire de sortie au cas ou il existe pas
make_path($dir_sortie);

# ==============================================================================
# On se connecte a fasterdb et on prépare les requetes
# ==============================================================================

my $select_nb_genes_total_sth = $dbh->prepare(
	"SELECT COUNT(*) FROM $table_trans"
);

my $select_genes_sth = $dbh->prepare(
	"SELECT id_gene, trans_fc, trans_pval, trans_nb_sondes, trans_nb_exons
	FROM $table_trans
	WHERE ABS(LOG2(trans_fc)) >= LOG2(?) AND trans_pval <= ?"
);

my $select_infos_gene_sth = $dbh->prepare(
	"SELECT * FROM $table_genes WHERE id_fasterdb = ?"
);

# ==============================================================================
# Initialisation fichier excel
# ==============================================================================

# On crée un fichier excel
my $xlsh = Spreadsheet::WriteExcel->new($fichier_sortie);

# On ajoute les pages
my $f_resume			= $xlsh->add_worksheet('Resume de l\'analyse');
my $f				= $xlsh->add_worksheet('Transcription');

# On défini les couleurs
my $couleur_entete		= $xlsh->set_custom_color(39, 189, 189, 189);
my $couleur_up			= $xlsh->set_custom_color(40, 255, 204, 153);
my $couleur_down		= $xlsh->set_custom_color(41, 204, 255, 204);

# On définit les format d'affichage
my $format_entete		= $xlsh->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_entete_merge		= $xlsh->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_resume_titre		= $xlsh->add_format(color => 'black', bold => 1, center_across => 1);
my $format_cell_center		= $xlsh->add_format(color => 'black', bold => 0, center_across => 1);
my $format_up			= $xlsh->add_format(color => 'black', bg_color => $couleur_up, border => 1, border_color => 'black', center_across => 1);
my $format_down			= $xlsh->add_format(color => 'black', bg_color => $couleur_down, border => 1, border_color => 'black', center_across => 1);

# ==============================================================================
# On ajoute les gènes dans la feuille
# ==============================================================================

# On modifie la largeur des colones
$f->set_column(0, 0, 12); # Fasterdb id
$f->set_column(1, 1, 18); # Source id
$f->set_column(2, 2, 12); # Link
$f->set_column(3, 3, 12); # Symbol
$f->set_column(4, 4, 30); # Description
$f->set_column(5, 5, 24); # Pos chrom
$f->set_column(7, 7, 12); # Regulation
$f->set_column(8, 8, 8); # FC
$f->set_column(9, 9, 12); # pval
$f->set_column(10, 10, 12); # nb probes

# On fait les premiers entetes
$f->merge_range(0, 0, 0, 5, 'Infos Gene', $format_entete_merge);
$f->merge_range(0, 7, 0, 11, 'Algo SI', $format_entete_merge);

# On défini les entetes
my @entetes = ();

# Infos du gène
push(@entetes, 'Fasterdb id');
push(@entetes, 'Source id');
push(@entetes, 'Link Elexir');
push(@entetes, 'Symbol');
push(@entetes, 'Description');
push(@entetes, 'Chr Position');
push(@entetes, '');

# Regulation
push(@entetes, 'Regulation');
push(@entetes, 'FC');
push(@entetes, 'Pvalue');
push(@entetes, 'Nb probes');
push(@entetes, 'Nb exons');

for(my $j = 0; $j < @entetes; $j++){

	my $format = ($entetes[$j] ne '') ? $format_entete : undef;

	$f->write(1, $j, $entetes[$j], $format);

}

# On selectionne les gènes régulés
$select_genes_sth->execute($seuil_trans, $seuil_pval);
my @genes = @{$select_genes_sth->fetchall_arrayref({})};
$select_genes_sth->finish;

# On classe les gènes
@genes = sort {
	# On classe déjà les up en premier
	($b->{'trans_fc'} >= 1) <=> ($a->{'trans_fc'} >= 1)
	||
	# Ensuite par fold
	format_fold($b->{'trans_fc'}) <=> format_fold($a->{'trans_fc'})
} @genes;

# On ajoute chaque gène dans la feuille, en comptant les ups et les downs
my $nb_ups = 0;
my $nb_downs = 0;

for(my $i = 0; $i < @genes; $i++){

	my $gene = $genes[$i];

	# On récupère les infos du gène
	$select_infos_gene_sth->execute($gene->{'id_gene'});
	my $infos_gene = $select_infos_gene_sth->fetchrow_hashref;
	$select_infos_gene_sth->finish;

	# On compte les up et les down
	($gene->{'trans_fc'} >= 1) ? $nb_ups++ : $nb_downs++;

	# On formatte les infos
	$infos_gene->{'description'} =~ s/\[.+\]$//;

	my $pos_chrom =
		$infos_gene->{'chromosome'} .
		':' . $infos_gene->{'start_sur_chromosome'} .
		'-' . $infos_gene->{'end_sur_chromosome'} .
		':' . $infos_gene->{'strand'};

	my $regulation = ($gene->{'trans_fc'} >= 1) ? 'up' : 'down';

	my $format = ($gene->{'trans_fc'} >= 1) ? $format_up : $format_down;

	# On crée le tableau de data
	my @data = ();

	# Infos du gène
	push(@data, $infos_gene->{'id_fasterdb'});
	push(@data, $infos_gene->{'id_source'});
	push(@data, 'blah');
	push(@data, $infos_gene->{'symbol'});
	push(@data, $infos_gene->{'description'});
	push(@data, $pos_chrom);
	push(@data, '');

	# Regulation
	push(@data, $regulation);
	push(@data, round(format_fold($gene->{'trans_fc'}), 2));
	push(@data, $gene->{'trans_pval'});
	push(@data, $gene->{'trans_nb_sondes'});
	push(@data, $gene->{'trans_nb_exons'});

	# On affiche les data
	for(my $j = 0; $j < @data; $j++){

		my $format = ($data[$j] ne '') ? $format : undef;

		# +2 parce que les deux premières lignes sont les entetes
		$f->write($i + 2, $j, $data[$j], $format);

	}

}

# ==============================================================================
# On écrit la page de résumé
# ==============================================================================

$select_nb_genes_total_sth->execute;
my($nb_genes_total) = $select_nb_genes_total_sth->fetchrow_array;
$select_nb_genes_total_sth->finish;

$f_resume->set_column(0, 0, 30);
$f_resume->write(0, 0, date(), $format_cell_center);
$f_resume->write(2, 0, "Parametres utilises", $format_resume_titre);
$f_resume->write(3, 0, "Seuil fold", $format_cell_center);
$f_resume->write(3, 1, round($seuil_trans, 2), $format_cell_center);
$f_resume->write(4, 0, "Seuil p-value", $format_cell_center);
$f_resume->write(4, 1, $seuil_pval, $format_cell_center);
$f_resume->write(6, 0, "Resultats", $format_resume_titre);
$f_resume->write(7, 0, "Genes exprimes", $format_cell_center);
$f_resume->write(7, 1, $nb_genes_total, $format_cell_center);
$f_resume->write(8, 0, "Genes regules", $format_cell_center);
$f_resume->write(8, 1, $nb_ups + $nb_downs, $format_cell_center);
$f_resume->write(9, 0, "Genes up", $format_cell_center);
$f_resume->write(9, 1, $nb_ups, $format_cell_center);
$f_resume->write(10, 0, "Genes down", $format_cell_center);
$f_resume->write(10, 1, $nb_downs, $format_cell_center);
