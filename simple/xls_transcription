#!/usr/bin/perl
use warnings;
use strict;
use YAML::XS qw(LoadFile);
use DBI;
use File::Path qw(make_path);
use Spreadsheet::WriteExcel;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../lib";
use Format;
use Math;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Paramètres de sélection pour les résulats
my $seuil_trans = $config->{'simple'}{'excel'}{'seuil_trans'};
my $seuil_pval = $config->{'simple'}{'excel'}{'seuil_pval'};
my $seuil_fiabilite_fcGene = $config->{'simple'}{'excel'}{'seuil_fc_gene'};

# Répertoire de sortie 
my $dir_xls = $config->{'dir_xls'};

# ==============================================================================
# Connection à elexir et préparation de la requete pour les infos de l'analyse
# ==============================================================================

my $dbh_elexir = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

# On selectionne les infos de l'analyse
my $select_infos_analyse_sth = $dbh_elexir->prepare(
	"SELECT a.id_project, a.name, p.organism, p.type as type_chips,
	a.version, a.type
	FROM projects AS p, analyses AS a
	WHERE a.id_project = p.id
	AND a.id = ?"
);

# ==============================================================================
# On récupère les infos de l'analyse
# ==============================================================================

$select_infos_analyse_sth->execute($id_analyse);

my $infos_analyse = $select_infos_analyse_sth->fetchrow_hashref;

die('L\'id de l\'analyse n\'est pas valide.') if(!$infos_analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($infos_analyse->{'type'} ne 'simple'){

	die('Le script simple ne fonctionne que sur les analyses simples :o)');

}

# ==============================================================================
# On récupère les infos dont on a besoin selon les infos de l'analyse
# ==============================================================================

# On récupère les infos de la bdd
my $id_projet = $infos_analyse->{"id_project"};
my $version = $infos_analyse->{'version'};
my $orga = $infos_analyse->{'organism'};
my $name = $infos_analyse->{'name'};
my $type_chips = $infos_analyse->{'type_chips'};

# on crée les variables du script qui déendent de l'analyse
my $base_fasterdb = $config->{'db_name_fasterdb'}{$version}{$orga};
my $table_trans = get_table_transcription($id_projet, $id_analyse);
my $dir_sortie = $dir_xls . '/' . $id_projet . '/' . $id_analyse;
my $fichier_sortie = $dir_sortie . '/' . $name . '_transcription.xls';

# On crée le répertoire de sortie au cas ou il existe pas
make_path($dir_sortie);

# ==============================================================================
# On se connecte a fasterdb et on prépare les requetes
# ==============================================================================

my $dbh_fasterdb = DBI->connect(
	'DBI:mysql:' . $base_fasterdb . ':' . $db_host,
	$db_user,
	$db_pass
);

my $select_genes_nofdr_sth = $dbh_elexir->prepare(
	"SELECT gene_id, trans_fc, trans_pval, trans_nb_sondes, trans_nb_exons
	FROM $table_trans
	WHERE ABS(LOG2(trans_fc)) >= LOG2(?) AND trans_pval <= ?"
);

my $select_genes_fdr_sth = $dbh_elexir->prepare(
	"SELECT gene_id, trans_fc, trans_adjp AS trans_pval, trans_nb_sondes, trans_nb_exons
	FROM $table_trans
	WHERE ABS(LOG2(trans_fc)) >= LOG2(?) AND trans_adjp <= ?"
);

my $select_infos_gene_sth = $dbh_fasterdb->prepare(
	"SELECT stable_id_ensembl, official_symbol, description,
	chromosome, start_sur_chromosome, end_sur_chromosome, strand
	FROM genes
	WHERE id = ?"
);

my $select_orthologues_sth = $dbh_fasterdb->prepare(
	"SELECT genes_humains, genes_souris
	FROM genes_orthologues
	WHERE genes_humains = ? OR genes_souris = ?"
);

# ==============================================================================
# Initialisation fichier excel
# ==============================================================================

# On crée un fichier excel
my $xlsh = Spreadsheet::WriteExcel->new($fichier_sortie);

# On ajoute les pages
my $f_resume			= $xlsh->add_worksheet('Resume de l\'analyse');
my $f_transcription_no_fdr	= $xlsh->add_worksheet('SANS correction pvals');
my $f_transcription_fdr		= $xlsh->add_worksheet('AVEC correction pvals');

# On défini les couleurs
my $couleur_entete		= $xlsh->set_custom_color(39, 189, 189, 189);
my $couleur_up			= $xlsh->set_custom_color(40, 255, 204, 153);
my $couleur_down		= $xlsh->set_custom_color(41, 204, 255, 204);

# On définit les format d'affichage
my $format_resume_titre		= $xlsh->add_format(color => 'black', bold => 1, center_across => 1);
my $format_resume_cell		= $xlsh->add_format(color => 'black', bold => 0, center_across => 1);
my $format_cell_no_center	= $xlsh->add_format(color => 'black', bold => 0);
my $format_entete		= $xlsh->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_up			= $xlsh->add_format(color => 'black', bg_color => $couleur_up, border => 1, border_color => 'black', center_across => 1);
my $format_down			= $xlsh->add_format(color => 'black', bg_color => $couleur_down, border => 1, border_color => 'black', center_across => 1);

# ==============================================================================
# Feuille résumé
# ==============================================================================

# Infos de base
$f_resume->write(0, 0, date(), $format_cell_no_center);
$f_resume->write(2, 0, "Parametres utilises", $format_resume_titre);
$f_resume->write(3, 0, "Seuil fold", $format_resume_titre);
$f_resume->write(3, 1, round($seuil_trans, 2), $format_resume_titre);
$f_resume->write(4, 0, "Seuil p-value", $format_resume_titre);
$f_resume->write(4, 1, $seuil_pval, $format_resume_titre);

# Infos sur les sondes
my $num_ligne = 8;
$f_resume->set_column(0, 0, 25);
$f_resume->set_column(2, 2, 20);
$f_resume->write($num_ligne++, 0, "Sondes et entites analysees", $format_resume_titre);
$num_ligne++;
$f_resume->write($num_ligne++, 0, "Sondes", $format_resume_titre);
$num_ligne++;
$f_resume->write($num_ligne++, 0, "Sur la puce", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Avec gc < 18", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Non ch", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Exprimees", $format_resume_cell);
$num_ligne++;
$f_resume->write($num_ligne++, 0, "Ciblant des entites", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Introniques", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Non utilisees (inter-geniques, chevauchantes, non hybridees...)", $format_cell_no_center);
$num_ligne++;
$f_resume->write($num_ligne++, 0, "Analysables*", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Analysees*", $format_resume_cell);

# Légende
$f_resume->write(36, 0, "* analysable", $format_cell_no_center);
$f_resume->write(36, 1, "avec sonde : gc < 18, non ch et ciblant une entite", $format_cell_no_center);
$f_resume->write(37, 0, "* analysable", $format_cell_no_center);
$f_resume->write(37, 1, "avec sonde : gc <18, non ch, ciblant une entite et exprimee dans l'experience", $format_cell_no_center);

# ==============================================================================
# On ajoute les gènes dans les feuilles
# ==============================================================================

# Fonction pour formatter le fold
sub format_fold{

	my($fold) = @_;

	return ($fold >= 1) ? $fold : 1/$fold;

}

my @genes = ();

# On selectionne les gènes no fdr
$select_genes_nofdr_sth->execute($seuil_trans, $seuil_pval);
@genes = @{$select_genes_nofdr_sth->fetchall_arrayref({})};
$select_genes_nofdr_sth->finish;

my($nb_nofdr_up, $nb_nofdr_down) = write_list(
	$f_transcription_no_fdr,
	$format_entete,
	$format_up,
	$format_down,
	@genes
);

# On selectionne les gènes fdr
$select_genes_fdr_sth->execute($seuil_trans, $seuil_pval);
@genes = @{$select_genes_fdr_sth->fetchall_arrayref({})};
$select_genes_fdr_sth->finish;

my($nb_fdr_up, $nb_fdr_down) = write_list(
	$f_transcription_fdr,
	$format_entete,
	$format_up,
	$format_down,
	@genes
);

# ==============================================================================
# Fonction pour remplir la feuille
# ==============================================================================

sub write_list{

	my($f, $format_entete, $format_up, $format_down, @genes) = @_;

	my $nb_up = 0;
	my $nb_down = 0;

	# On modifie la largeur des colones
	$f->set_column(0, 0, 12);
	$f->set_column(1, 1, 12);
	$f->set_column(3, 4, 18);
	$f->set_column(5, 6, 23);
	$f->set_column(7, 7, 10);
	$f->set_column(10, 10, 12);

	# On défini les entetes
	my @entetes = (
		'Fasterdb id',
		'Link Elexir',
		'Symbol',
		'Name',
		'Human Ensembl id',
		'Mouse Ensembl id',
		'Chr Position',
		'Regulation',
		'FC',
		'Pvalue',
		'Nb probes',
		'Nb exons'
	);

	for(my $j = 0; $j < @entetes; $j++){

		$f->write(0, $j, $entetes[$j], $format_entete);

	}

	# On classe les gènes
	@genes = sort {
		# On classe déjà les up en premier
		($b->{'trans_fc'} >= 1) <=> ($a->{'trans_fc'} >= 1)
		||
		# Ensuite par fold
		format_fold($b->{'trans_fc'}) <=> format_fold($a->{'trans_fc'})
	} @genes;

	# Pour chaque gène
	for(my $i = 0; $i < @genes; $i++){

		my $gene = $genes[$i];

		# On récupère les infos du gène
		$select_infos_gene_sth->execute($gene->{'gene_id'});
		my $infos_gene = $select_infos_gene_sth->fetchrow_hashref;
		$select_infos_gene_sth->finish;

		# On selectionne les gènes orthologues
		$select_orthologues_sth->execute($infos_gene->{'stable_id_ensembl'}, $infos_gene->{'stable_id_ensembl'});
		my $orthologues = $select_orthologues_sth->fetchall_arrayref({});
		$select_orthologues_sth->finish;

		# On compte les up et les down
		($gene->{'trans_fc'} >= 1) ? $nb_up++ : $nb_down++;

		# On formatte les infos
		my @orth_humain = map { $_->{'genes_humains'} } @{$orthologues};
		my @orth_souris = map { $_->{'genes_souris'} } @{$orthologues};

		if($infos_analyse->{'organism'} eq 'human'){

			push(@orth_humain, $infos_gene->{'stable_id_ensembl'});

		}else{

			push(@orth_souris, $infos_gene->{'stable_id_ensembl'});

		}

		my $orth_humain = join(', ', @orth_humain);
		my $orth_souris = join(', ', @orth_souris);

		my $strand = ($infos_gene->{'strand'} eq '1') ? '+' : '-';

		my $pos_chrom =
			$infos_gene->{'chromosome'} .
			':' . $infos_gene->{'start_sur_chromosome'} .
			'-' . $infos_gene->{'end_sur_chromosome'} .
			':' . $strand;

		my $regulation = ($gene->{'trans_fc'} >= 1) ? 'up' : 'down';

		my $format = ($gene->{'trans_fc'} >= 1) ? $format_up : $format_down;

		# On crée le tableau de data
		my @data = (
			$infos_gene->{'gene_id'},
			'blah',
			$infos_gene->{'official_symbol'},
			$infos_gene->{'description'},
			$orth_humain,
			$orth_souris,
			$pos_chrom,
			$regulation,
			round(format_fold($gene->{'trans_fc'}), 2),
			$gene->{'trans_pval'},
			$gene->{'trans_nb_sondes'},
			$gene->{'trans_nb_exons'}
		);

		# On affiche les data
		for(my $j = 0; $j < @data; $j++){

			# $i + 1 parce que la premiere ligne est l'entete
			$f->write($i + 1, $j, $data[$j], $format);

		}

	}

	return($nb_up, $nb_down);

}

# ==============================================================================
# On écrit le nombre de gènes fdr up/down no fdr up/down
# ==============================================================================

$num_ligne = 8;

$f_resume->set_column(5, 5, 30);
$f_resume->set_column(9, 9, 13);
$f_resume->set_column(9, 9, 13);
$f_resume->set_column(11, 11, 18);

$f_resume->write($num_ligne++, 5, "Resultats", $format_resume_titre);
$num_ligne++;
$f_resume->write($num_ligne++, 5, "Sans correction des p-valeurs", $format_resume_titre);
$num_ligne++;
$f_resume->write($num_ligne, 5, "Genes regules", $format_resume_cell);
$f_resume->write($num_ligne, 6, $nb_nofdr_up + $nb_nofdr_down, $format_resume_cell);
$f_resume->write($num_ligne, 7, "Genes up", $format_resume_cell);
$f_resume->write($num_ligne, 8, $nb_nofdr_up, $format_resume_cell);
$f_resume->write($num_ligne, 9, "Genes down", $format_resume_cell);
$f_resume->write($num_ligne, 10, $nb_nofdr_down, $format_resume_cell);
$num_ligne++;
$num_ligne++;
$f_resume->write($num_ligne++, 5, "Avec correction des p-valeurs", $format_resume_titre);
$num_ligne++;
$f_resume->write($num_ligne, 5, "Genes regules", $format_resume_cell);
$f_resume->write($num_ligne, 6, $nb_fdr_up + $nb_fdr_down, $format_resume_cell);
$f_resume->write($num_ligne, 7, "Genes up", $format_resume_cell);
$f_resume->write($num_ligne, 8, $nb_fdr_up, $format_resume_cell);
$f_resume->write($num_ligne, 9, "Genes down", $format_resume_cell);
$f_resume->write($num_ligne, 10, $nb_fdr_down, $format_resume_cell);
