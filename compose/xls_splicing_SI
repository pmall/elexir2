#!/usr/bin/perl
use warnings;
use strict;
use YAML::XS qw(LoadFile);
use DBI;
use File::Path qw(make_path);
use Spreadsheet::WriteExcel;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../lib";
use Format;
use Math;
use Analyse;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Paramètres de sélection pour les résulats
my $seuil_epissage = $config->{'compose'}{'excel'}{'seuil_epissage_simple'};
my $seuil_epissage_j_vs_o = $config->{'compose'}{'excel'}{'seuil_epissage_j_vs_o'};
my $seuil_pval = $config->{'simple'}{'excel'}{'seuil_pval'};

# Répertoire de sortie 
my $dir_xls = $config->{'dir_xls'};

# ==============================================================================
# On récupère les infos de l'analyse
# ==============================================================================

my $dbh = DBI->connect(
	"DBI:mysql:" . $db_name . ":" . $db_host,
	$db_user,
	$db_pass
);

my $analyse = Analyse->get_analyse($dbh, $id_analyse);

die('L\'id de l\'analyse n\'est pas valide.') if(!$analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($analyse->{'type'} ne 'compose'){

	die('Le script composé ne fonctionne que sur les analyses composées :o)');

}

# ==============================================================================
# On récupère les infos dont on a besoin selon les infos de l'analyse
# ==============================================================================

# On récupère les infos de la bdd
my $id_projet = $analyse->{"id_project"};
my $type_chips = $analyse->{'type_chips'};
my $version = $analyse->{'version'};
my $orga = $analyse->{'organism'};
my $name = $analyse->{'name'};
my $paire = $analyse->{'paired'};
my $nb_paires_rep = $analyse->{'nb_paires_rep'};

# on crée les variables du script qui déendent de l'analyse
my $table_genes = $config->{'table_genes'}{$version}{$orga};
my $table_entites = $config->{'table_entites'}{$version}{$orga};
my $table_trans = get_table_transcription($id_projet, $id_analyse);
my $table_splicing = get_table_splicing($id_projet, $id_analyse);
my $dir_sortie = $dir_xls . '/' . $id_projet . '/' . $id_analyse;
my $fichier_sortie = $dir_sortie . '/' . $name . '_epissage_SI.xls';

# On crée les dossier
make_path($dir_sortie);

# ==============================================================================
# On se connecte a fasterdb
# ==============================================================================

my $select_entites_sth = $dbh->prepare(
	"SELECT * FROM $table_splicing
	WHERE ABS(LOG2(SI_ba)) >= LOG2(?) AND SI_pval_ba <= ?"
);

my $select_infos_gene_sth = $dbh->prepare(
	"SELECT * FROM $table_genes WHERE id_fasterdb = ?"
);

my $select_infos_entite_sth = $dbh->prepare(
	"SELECT id, type, exon_pos, start_sur_gene, end_sur_gene
	FROM $table_entites
	WHERE id = ?"
);

# ==============================================================================
# Initialisation fichier excel
# ==============================================================================

# Fichier
my $xlsh			= Spreadsheet::WriteExcel->new($fichier_sortie);

# Feuilles
my $f_resume			= $xlsh->add_worksheet('Parametres et entites analysees');
my $f_up			= $xlsh->add_worksheet('B vs A > ' . $seuil_epissage);
my $f_down			= $xlsh->add_worksheet('B vs A < -' . $seuil_epissage);

# On défini les couleurs
my $couleur_entete		= $xlsh->set_custom_color(40, 189, 189, 189);
my $couleur_up_odd		= $xlsh->set_custom_color(41, 255, 204, 153);
my $couleur_up_even		= $xlsh->set_custom_color(43, 255, 184, 133);
my $couleur_down_odd		= $xlsh->set_custom_color(42, 204, 255, 204);
my $couleur_down_even		= $xlsh->set_custom_color(44, 184, 255, 184);
my $couleur_mauv_fc_odd		= $xlsh->set_custom_color(45, 255, 102, 102);
my $couleur_mauv_fc_even	= $xlsh->set_custom_color(46, 255, 71, 71);

# Formats
my $format_resume_titre		= $xlsh->add_format(color => 'black', bold => 1, center_across => 1);
my $format_cell_center		= $xlsh->add_format(color => 'black', bold => 0, center_across => 1);
my $format_cell_no_center	= $xlsh->add_format(color => 'black', bold => 0);
my $format_entete		= $xlsh->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_entete_merge		= $xlsh->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_up_odd		= $xlsh->add_format(color => 'black', bg_color => $couleur_up_odd, border => 1, border_color => 'black', center_across => 1);
my $format_up_even		= $xlsh->add_format(color => 'black', bg_color => $couleur_up_even, border => 1, border_color => 'black', center_across => 1);
my $format_down_odd		= $xlsh->add_format(color => 'black', bg_color => $couleur_down_odd, border => 1, border_color => 'black', center_across => 1);
my $format_down_even		= $xlsh->add_format(color => 'black', bg_color => $couleur_down_even, border => 1, border_color => 'black', center_across => 1);
my $format_mauv_fc_odd		= $xlsh->add_format(color => 'black', bg_color => $couleur_mauv_fc_odd, border => 1, border_color => 'black', center_across => 1);
my $format_mauv_fc_even		= $xlsh->add_format(color => 'black', bg_color => $couleur_mauv_fc_even, border => 1, border_color => 'black', center_across => 1);

# ==============================================================================
# Feuille résumé
# ==============================================================================

# Infos de base
$f_resume->write(0, 0, date(), $format_cell_no_center);
$f_resume->write(2, 0, "Parametres utilises", $format_resume_titre);
$f_resume->write(3, 0, "Seuil fold", $format_resume_titre);
$f_resume->write(3, 1, round($seuil_epissage, 2), $format_resume_titre);
$f_resume->write(4, 0, "Seuil p-value", $format_resume_titre);
$f_resume->write(4, 1, $seuil_pval, $format_resume_titre);

my $num_ligne = 8;

# ==============================================================================
# On ajoute les entités dans la feuille
# ==============================================================================

# On ajoute chaque entité dans la feuille, en comptant les ups et les downs
my $num_genes = 0;
my $id_gene_prec = 0;
my $nb_ups = 0;
my $nb_downs = 0;

# On selectionne les entites régulées
$select_entites_sth->execute($seuil_epissage, $seuil_pval);
my @entites = @{$select_entites_sth->fetchall_arrayref({})};
$select_entites_sth->finish;

# On fait un hash du fc max par gène pour le classement
my %SI_max_gene = ();

foreach my $entite (@entites){

	my $id_gene = $entite->{'id_gene'};
	my $SI = format_fold($entite->{'SI_oj'});

	if(!$SI_max_gene{$id_gene} or $SI > $SI_max_gene{$id_gene}){

		$SI_max_gene{$id_gene} = $SI;

	}

}

# On récupère les entités qui ont B/A up et ceux qui ont B/A down
my @entites_ba_up = grep { $_->{'SI_ba'} >= 1 } @entites;
my @entites_ba_down = grep { $_->{'SI_ba'} < 1 } @entites;

# On écrit ces deux listes d'entités, chacune dans la feuille appropriée
write_list($f_up, @entites_ba_up);
write_list($f_down, @entites_ba_down);

sub write_list{

	my($f, @entites) = @_;

	# On modifie la largeur des colones
	$f->set_column(0, 0, 12); # Fasterdb id
	$f->set_column(1, 1, 18); # Source id
	$f->set_column(2, 2, 12); # Link
	$f->set_column(3, 3, 12); # Symbol
	$f->set_column(4, 4, 12); # Elexir id
	$f->set_column(5, 5, 12); # Type
	$f->set_column(7, 7, 18); # Coordonnées
	$f->set_column(8, 8, 18); # Sequence

	# On fait les premiers entetes
	$f->merge_range(0, 0, 0, 8, 'Infos Entite', $format_entete_merge);
	$f->merge_range(0, 10, 0, 13, 'Regulation B/A', $format_entete_merge);
	$f->merge_range(0, 15, 0, 19, 'Regulation D/C', $format_entete_merge);
	$f->merge_range(0, 21, 0, 25, 'Regulation O/J', $format_entete_merge);

	# On défini les entetes de chaque colonnes
	my @entetes = ();

	# Infos entité
	push(@entetes, 'Fasterdb ID');
	push(@entetes, 'Source ID');
	push(@entetes, 'Link Elexir');
	push(@entetes, 'Symbol');
	push(@entetes, 'Elexir ID');
	push(@entetes, 'Type');
	push(@entetes, 'Position');
	push(@entetes, 'Coordonnees');
	push(@entetes, 'Sequence');
	push(@entetes, ''); # Space

	# Reg SI B/A
	push(@entetes, 'Reg');
	push(@entetes, 'SI B/A');
	push(@entetes, 'Pvalue');
	push(@entetes, 'NB sondes');
	push(@entetes, ''); # Space

	# Reg SI D/C
	push(@entetes, 'Reg');
	push(@entetes, 'SI D/C');
	push(@entetes, 'Pvalue');
	push(@entetes, 'NB sondes');
	push(@entetes, 'Coherent');
	push(@entetes, ''); # Space

	# Reg SI O/J
	push(@entetes, 'Reg');
	push(@entetes, 'SI O/J');
	push(@entetes, 'Pvalue');
	push(@entetes, 'NB sondes');
	push(@entetes, 'Coherent');

	for(my $j = 0; $j < @entetes; $j++){

		my $format = ($entetes[$j] ne '') ? $format_entete : undef;

		$f->write(1, $j, $entetes[$j], $format);

	}

	# On classe les entites
	@entites = sort {
		# déjà on classe par fc fort/fc faible
		format_fold($b->{'SI_oj'}) >= $seuil_epissage_j_vs_o
		<=>
		format_fold($a->{'SI_oj'}) >= $seuil_epissage_j_vs_o
		||
		# Ensuite par gène
		$SI_max_gene{$b->{'id_gene'}} <=> $SI_max_gene{$a->{'id_gene'}}
		||
		# Ensuite encore par SI (au sein du gène)
		format_fold($b->{'SI_oj'}) <=> format_fold($a->{'SI_oj'})
	} @entites;

	# Pour chaque entité
	for(my $i = 0; $i < @entites; $i++){

		my $entite = $entites[$i];

		# On récupère les infos du gène
		$select_infos_gene_sth->execute($entite->{'id_gene'});
		my $infos_gene = $select_infos_gene_sth->fetchrow_hashref;
		$select_infos_gene_sth->finish;

		# On récupère les infos de l'entité
		$select_infos_entite_sth->execute($entite->{'id_entite'});
		my $infos_entite = $select_infos_entite_sth->fetchrow_hashref;
		$select_infos_entite_sth->finish;

		# on formatte les infos
		$infos_gene->{'description'} =~ s/\[.+\]$//;

		my $pos_chrom =
			$infos_gene->{'chromosome'} .
			':' . $infos_gene->{'start_sur_chromosome'} .
			'-' . $infos_gene->{'end_sur_chromosome'} .
			':' . $infos_gene->{'strand'};

		my $pos_entite = $infos_entite->{'start_sur_gene'} .
			'-' . $infos_entite->{'end_sur_gene'};

		my $reg_ba = ($entite->{'SI_ba'} >= 1) ? 'up' : 'down';
		my $reg_dc = ($entite->{'SI_ba'} >= 1) ? 'up' : 'down';
		my $reg_oj;
		my $format;

		# On défini la regulation de O/J
		if($entite->{'SI_ba'} >= 1){

			if($entite->{'SI_oj'} >= 1){

				$reg_oj = 'Renforce';
				$format = $format_up_odd;

			}else{

				$reg_oj = 'Affaiblit';
				$format = $format_down_odd;

			}

		}else{

			if($entite->{'SI_oj'} >= 1){

				$reg_oj = 'Affaiblit';
				$format = $format_down_odd;

			}else{

				$reg_oj = 'Renforce';
				$format = $format_up_odd;

			}

		}

		# Si O/J est trop faible on lui donne un format spécial
		if(format_fold($entite->{'SI_oj'}) < $seuil_epissage_j_vs_o){

			$format = $format_mauv_fc_odd;

		}

		# On crée le tableau de data
		my @data = ();

		# Infos du gène
		push(@data, $infos_gene->{'id_fasterdb'});
		push(@data, $infos_gene->{'id_source'});
		push(@data, 'blah');
		push(@data, $infos_gene->{'symbol'});
		push(@data, $infos_entite->{'id'});
		push(@data, $infos_entite->{'type'});
		push(@data, $infos_entite->{'exon_pos'});
		push(@data, $pos_entite);
		push(@data, 'seq');
		push(@data, ''); # Space

		# Algo SI B/A
		push(@data, $reg_ba);
		push(@data, format_fold($entite->{'SI_ba'}));
		push(@data, $entite->{'SI_pval_ba'});
		push(@data, $entite->{'nb_sondes_ba'});
		push(@data, ''); # Space

		# Algo SI B/A
		push(@data, $reg_dc);
		push(@data, format_fold($entite->{'SI_dc'}));
		push(@data, $entite->{'SI_pval_dc'});
		push(@data, $entite->{'nb_sondes_dc'});
		push(@data, $entite->{'is_robust_dc'});
		push(@data, ''); # Space

		# Algo SI B/A
		push(@data, $reg_oj);
		push(@data, format_fold($entite->{'SI_oj'}));
		push(@data, $entite->{'SI_pval_oj'});
		push(@data, $entite->{'nb_sondes_oj'});
		push(@data, $entite->{'is_robust_oj'});
		push(@data, ''); # Space

		# On affiche les data
		for(my $j = 0; $j < @data; $j++){

			my $format = ($data[$j] ne '') ? $format : undef;

			# +2 parce que les deux premières lignes sont les entetes
			$f->write($i + 2, $j, $data[$j], $format);

		}

	}

}

# ==============================================================================
# On écrit le nombre d'entités up/down
# ==============================================================================

$f_resume->set_column(5, 5, 30);
$f_resume->set_column(9, 9, 13);
$f_resume->set_column(9, 9, 13);
$f_resume->set_column(11, 11, 18);

$f_resume->write($num_ligne++, 5, "Resultats", $format_resume_titre);
$num_ligne++;
$f_resume->write($num_ligne, 5, "Entités regules", $format_cell_center);
$f_resume->write($num_ligne, 6, $nb_ups + $nb_downs, $format_cell_center);
$f_resume->write($num_ligne, 7, "Entités up", $format_cell_center);
$f_resume->write($num_ligne, 8, $nb_ups, $format_cell_center);
$f_resume->write($num_ligne, 9, "Entités down", $format_cell_center);
$f_resume->write($num_ligne, 10, $nb_downs, $format_cell_center);
