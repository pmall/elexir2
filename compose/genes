#!/usr/bin/perl
use strict;
use warnings;
use YAML::XS qw(LoadFile);
use DBI;
use List::MoreUtils qw(uniq);
use FindBin qw($Bin);
use lib $FindBin::Bin . '/../lib';
use Format;
use Math;
use Analyse;
use Stats;
use Data::Dumper;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');
my $limit = shift @ARGV // 18446744073709551615; # Si pas indiqué, on met maxint /

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Parametres pour l'analyse
my $gc_max = $config->{'simple'}{'gc_max'};
my $nb_occ_max = $config->{'simple'}{'nb_occ_max'};
my $seuil_dabg = $config->{'simple'}{'seuil_dabg'};

# ==============================================================================
# On récupère les infos de l'exp
# ==============================================================================

# On se connecte a elexir
my $dbh = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

# On récupère les infos de l'analyse
my $infos_analyse = get_infos_analyse($dbh, $id_analyse);

# Message d'erreur si l'analyse n'existe pas
die('L\'id de l\'analyse n\'est pas valide.') if(!$infos_analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($infos_analyse->{'type'} ne 'compose'){

	die('Le script composé ne fonctionne que sur les analyses composées :o)');

}

# ==============================================================================
# On crée les noms de table dont on a besoin
# ==============================================================================

my $base_fasterdb = $config->{'db_name_fasterdb'}{$infos_analyse->{'version'}}{$infos_analyse->{'organism'}};
my $table_sondes = $config->{'table_sondes'}{$infos_analyse->{'type_chips'}}{$infos_analyse->{'version'}}{$infos_analyse->{'organism'}};
my $table_dabg = get_table_dabg($infos_analyse->{'id_project'});
my $table_intensites = get_table_intensites($infos_analyse->{'id_project'});
my $table_trans = get_table_transcription($infos_analyse->{'id_project'}, $id_analyse);

# ==============================================================================
# On prépare les requetes sur la bonne base fasterdb
# ==============================================================================

# On se connecte a fasterdb
my $dbh_fdb = DBI->connect(
	'DBI:mysql:' . $base_fasterdb . ':' . $db_host,
	$db_user,
	$db_pass
);

# On selectionne les gènes
my $select_genes_sth = $dbh_fdb->prepare("SELECT id FROM genes LIMIT ?");

# ==============================================================================
# On prépare la requete pour les sondes avec ces infos
# ==============================================================================

# On selectionne les sondes d'un gène
my $select_infos_sondes_sth = $dbh->prepare(
	"SELECT probe_id, nb_occ, gc_content, exon_pos
	FROM " . $table_sondes . "
	WHERE entite_type = 1
	AND utiliser_dans_analyse = 1
	AND gene_id = ?"
);

# On selectionne le dabg d'une sonde
my $select_dabg_sth = $dbh->prepare(
	"SELECT * FROM " . $table_dabg . " WHERE probe_id = ?"
);

# On selectionne l'intensité d'une sonde
my $select_intensite_sth = $dbh->prepare(
	"SELECT * FROM " . $table_intensites . " WHERE probe_id = ?"
);

# ==============================================================================
# On crée la table qui contient les valeurs des gène
# ==============================================================================

my @fields_trans = (
	'gene_id INT UNSIGNED NOT NULL PRIMARY KEY',
	'fc_ba DECIMAL(10,5) UNSIGNED NOT NULL',
	'fc_dc DECIMAL(10,5) UNSIGNED NOT NULL',
	'fc_oj DECIMAL(10,5) UNSIGNED NOT NULL',
	'pval_ba DECIMAL(12,10) UNSIGNED NOT NULL',
	'pval_cd DECIMAL(12,10) UNSIGNED NOT NULL',
	'pval_oj DECIMAL(12,10) UNSIGNED NOT NULL',
	'nb_sondes_ba SMALLINT UNSIGNED NOT NULL',
	'nb_sondes_cd SMALLINT UNSIGNED NOT NULL',
	'nb_sondes_oj SMALLINT UNSIGNED NOT NULL',
	'nb_exons_ba SMALLINT UNSIGNED NOT NULL',
	'nb_exons_cd SMALLINT UNSIGNED NOT NULL',
	'nb_exons_oj SMALLINT UNSIGNED NOT NULL'
);

$dbh->do('DROP TABLE IF EXISTS ' . $table_trans);
$dbh->do('CREATE TABLE ' . $table_trans . ' (' . join(', ', @fields_trans) . ')');

my $insert_gene_sth = $dbh->prepare(
	"INSERT INTO $table_trans VALUES(" . join(', ', ('?')x@fields_trans) . ")"
);

# ==============================================================================
# On début l'algo, pour chaque gène
# ==============================================================================

print 'Analyse des gènes' . "\n";

# On défini une liste de gènes (on les garde tous dans une liste pour calculer
# les pvals ajustés)
my @genes = ();

# On selectionne les gènes
$select_genes_sth->execute($limit);

# Pour chaque gène
while(my($id_gene) = $select_genes_sth->fetchrow_array){

	print $id_gene . "\n";

	# ======================================================================
	# On récupère les intensités des sondes du gène
	# ======================================================================

	# On récupère les infos des sondes
	$select_infos_sondes_sth->execute($id_gene);
	my $infos_sondes = $select_infos_sondes_sth->fetchall_hashref('probe_id');
	$select_infos_sondes_sth->finish;

	# Si le gène a moins de six sondes on zappe ça sert a rien
	next if(scalar(keys %{$infos_sondes}) < 6);

	# On vire les sondes qui ont pas les bonnes caractéristiques
	my $ids_probes_ok = [grep {
		$infos_sondes->{$_}->{'nb_occ'} <= $nb_occ_max
		and
		$infos_sondes->{$_}->{'gc_content'} <= $gc_max
	} keys %{$infos_sondes}];

	# Si le gène a moins de six sondes avec de bon critères on zappe
	next if(@{$ids_probes_ok} < 6);

	# On récupère les valeurs de dabg de chaque sonde
	my @sondes_ba = ();
	my @sondes_dc = ();
	my @sondes_oj = ();

	# Pour chaque id de sonde
	foreach my $probe_id (@{$ids_probes_ok}){

		# On récupère les valeurs de dabg de la sonde
		$select_dabg_sth->execute($probe_id);
		my $dabg = $select_dabg_sth->fetchrow_hashref;
		$select_dabg_sth->finish;

		# On calcule le dabg de ab
		my $dabg_ba = dabg(
			$infos_analyse->{'design'}->[0]->{'control'},
			$seuil_dabg,
			$dabg
		);

		# On calcule le dabg de cd
		my $dabg_dc = dabg(
			$infos_analyse->{'design'}->[0]->{'test'},
			$seuil_dabg,
			$dabg
		);

		# Si la sonde est exprimée dans ab ou cd on prend
		if($dabg_ba || $dabg_dc){

			# On va chercher ses intensites
			$select_intensite_sth->execute($probe_id);
			my $sonde = $select_intensite_sth->fetchrow_hashref;
			$select_intensite_sth->finish;

			# Et on l'ajoute à la liste des sondes
			push(@sondes_ba, $sonde) if($dabg_ba);
			push(@sondes_dc, $sonde) if($dabg_dc);
			push(@sondes_oj, $sonde) if($dabg_ba && $dabg_dc);

		}

	}

	# Si il n'y a pas six sondes dans chaque comparaison on zappe
	next if(@sondes_ba < 6 or @sondes_dc < 6 or @sondes_oj < 6);

	# ======================================================================
	# Calcul des fold change et de la pvalue pour la transcription
	# ======================================================================

	# On calcul les fold change des sondes
	my @fcs_ba = map {
		median(fcs_sonde($infos_analyse->{'design'}->[0]->{'control'}, $_))
	} @sondes_ba;

	my @fcs_dc = map {
		median(fcs_sonde($infos_analyse->{'design'}->[0]->{'test'}, $_))
	} @sondes_dc;

	my @fcs_oj = map {
		median(fcs_sonde($infos_analyse->{'design'}, $_))
	} @sondes_oj;

	# le fc du gène est la médiane des fc des sondes
	my $fc_ba = median(@fcs_ba);
	my $fc_dc = median(@fcs_dc);
	my $fc_oj = median(@fcs_oj);

	# On calcule la p value pour la transcription
	my $p_value_ba = ttest((log2($fc_ba) >= 0), log2(@fcs_ba));
	my $p_value_dc = ttest((log2($fc_dc) >= 0), log2(@fcs_dc));
	my $p_value_oj = ttest((log2($fc_oj) >= 0), log2(@fcs_oj));

	# ======================================================================
	# On calcule le nombre de sondes et d'exons utilisés dans l'analyse
	# ======================================================================

	# NB sondes utilisées pour la transcription
	my $nb_sondes_ba = @sondes_ba;
	my $nb_sondes_dc = @sondes_dc;
	my $nb_sondes_oj = @sondes_oj;

	# NB exons cibles par des sondes lors de la transcription
	my $nb_exons_ba = scalar(uniq(map {
		$infos_sondes->{$_->{'probe_id'}}->{'exon_pos'}
	} @sondes_ba));

	my $nb_exons_dc = scalar(uniq(map {
		$infos_sondes->{$_->{'probe_id'}}->{'exon_pos'}
	} @sondes_dc));

	my $nb_exons_oj = scalar(uniq(map {
		$infos_sondes->{$_->{'probe_id'}}->{'exon_pos'}
	} @sondes_oj));

	# ======================================================================
	# On ajoute le gène a la bdd
	# ======================================================================

	$insert_gene_sth->execute(
		$id_gene,
		$fc_ba,
		$fc_dc,
		$fc_oj,
		$p_value_ba,
		$p_value_dc,
		$p_value_oj,
		$nb_sondes_ba,
		$nb_sondes_dc,
		$nb_sondes_oj,
		$nb_exons_ba,
		$nb_exons_dc,
		$nb_exons_oj
	);

}
