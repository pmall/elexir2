#!/usr/bin/perl
use strict;
use warnings;
use YAML::XS qw(LoadFile);
use DBI;
use List::MoreUtils qw(uniq);
use FindBin qw($Bin);
use lib $FindBin::Bin . '/../lib';
use Format;
use Math;
use Analyse;
use Stats;
use Data::Dumper;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');
my $limit = shift @ARGV // 18446744073709551615; # Si pas indiqué, on met maxint /

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Parametres pour l'analyse
my $gc_max = $config->{'compose'}{'gc_max'};
my $nb_occ_max = $config->{'compose'}{'nb_occ_max'};
my $seuil_dabg = $config->{'compose'}{'seuil_dabg'};
my $nb_sondes_min_gene = $config->{'compose'}{'nb_sondes_min_gene'};
my $nb_exon_min_homogene = $config->{'compose'}{'nb_exons_min_homogene'};
my $nb_min_par_exon_homogene = $config->{'compose'}{'nb_min_par_exon_homogene'}; 

# ==============================================================================
# On récupère les infos de l'exp
# ==============================================================================

# On se connecte a elexir
my $dbh = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

# On récupère les infos de l'analyse
my $infos_analyse = get_infos_analyse($dbh, $id_analyse);

# Message d'erreur si l'analyse n'existe pas
die('L\'id de l\'analyse n\'est pas valide.') if(!$infos_analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($infos_analyse->{'type'} ne 'compose'){

	die('Le script composé ne fonctionne que sur les analyses composées :o)');

}

# ==============================================================================
# On crée les noms de table dont on a besoin
# ==============================================================================

my $base_fasterdb = $config->{'db_name_fasterdb'}{$infos_analyse->{'version'}}{$infos_analyse->{'organism'}};
my $table_sondes = $config->{'table_sondes'}{$infos_analyse->{'type_chips'}}{$infos_analyse->{'version'}}{$infos_analyse->{'organism'}};
my $table_dabg = get_table_dabg($infos_analyse->{'id_project'});
my $table_intensites = get_table_intensites($infos_analyse->{'id_project'});
my $table_trans = get_table_transcription($infos_analyse->{'id_project'}, $id_analyse);

# ==============================================================================
# On prépare les requetes sur la bonne base fasterdb
# ==============================================================================

# On se connecte a fasterdb
my $dbh_fdb = DBI->connect(
	'DBI:mysql:' . $base_fasterdb . ':' . $db_host,
	$db_user,
	$db_pass
);

# On selectionne les gènes
my $select_genes_sth = $dbh_fdb->prepare("SELECT id FROM genes LIMIT ?");

# On selectionne le nombre d'exons d'un gène
my $select_nb_exons_gene_sth = $dbh_fdb->prepare(
	"SELECT COUNT(id) AS nb_exons FROM exons_genomiques WHERE id_gene = ?"
);

# ==============================================================================
# On prépare la requete pour les sondes avec ces infos
# ==============================================================================

# On selectionne les sondes d'un gène
my $select_infos_sondes_sth = $dbh->prepare(
	"SELECT probe_id, nb_occ, gc_content, exon_pos
	FROM " . $table_sondes . "
	WHERE entite_type = 1
	AND utiliser_dans_analyse = 1
	AND gene_id = ?"
);

# On selectionne le dabg d'une sonde
my $select_dabg_sth = $dbh->prepare(
	"SELECT * FROM " . $table_dabg . " WHERE probe_id = ?"
);

# On selectionne l'intensité d'une sonde
my $select_intensite_sth = $dbh->prepare(
	"SELECT * FROM " . $table_intensites . " WHERE probe_id = ?"
);

# ==============================================================================
# On crée la table qui contient les valeurs des gène
# ==============================================================================

my @fields_trans = (
	'gene_id INT UNSIGNED NOT NULL PRIMARY KEY',
	'fc_ba DECIMAL(10,5) UNSIGNED NOT NULL',
	'fc_dc DECIMAL(10,5) UNSIGNED NOT NULL',
	'fc_oj DECIMAL(10,5) UNSIGNED NOT NULL',
	'pval_ba DECIMAL(12,10) UNSIGNED NOT NULL',
	'pval_dc DECIMAL(12,10) UNSIGNED NOT NULL',
	'pval_oj DECIMAL(12,10) UNSIGNED NOT NULL',
	'adjp_ba DECIMAL(12,10) UNSIGNED NOT NULL',
	'adjp_dc DECIMAL(12,10) UNSIGNED NOT NULL',
	'adjp_oj DECIMAL(12,10) UNSIGNED NOT NULL',
	'nb_sondes_ba SMALLINT UNSIGNED NOT NULL',
	'nb_sondes_dc SMALLINT UNSIGNED NOT NULL',
	'nb_sondes_oj SMALLINT UNSIGNED NOT NULL',
	'nb_exons_ba SMALLINT UNSIGNED NOT NULL',
	'nb_exons_dc SMALLINT UNSIGNED NOT NULL',
	'nb_exons_oj SMALLINT UNSIGNED NOT NULL'
);

$dbh->do('DROP TABLE IF EXISTS ' . $table_trans);
$dbh->do('CREATE TABLE ' . $table_trans . ' (' . join(', ', @fields_trans) . ')');

my $insert_gene_sth = $dbh->prepare(
	"INSERT INTO $table_trans VALUES(" . join(', ', ('?')x@fields_trans) . ")"
);

# ==============================================================================
# On début l'algo, pour chaque gène
# ==============================================================================

print 'Analyse des gènes' . "\n";

# On défini une liste de gènes (on les garde tous dans une liste pour calculer
# les pvals ajustés)
my @genes = ();

# On selectionne les gènes
$select_genes_sth->execute($limit);

# Pour chaque gène
while(my($id_gene) = $select_genes_sth->fetchrow_array){

	print $id_gene . "\n";

	# ======================================================================
	# On récupère les intensités des sondes du gène
	# ======================================================================

	# On récupère les infos des sondes
	$select_infos_sondes_sth->execute($id_gene);
	my $infos_sondes = $select_infos_sondes_sth->fetchall_hashref('probe_id');
	$select_infos_sondes_sth->finish;

	# Si le gène a moins de six sondes on zappe ça sert a rien
	next if(scalar(keys %{$infos_sondes}) < $nb_sondes_min_gene);

	# On vire les sondes qui ont pas les bonnes caractéristiques
	my $ids_probes_ok = [grep {
		# ON VIRE LES SONDES AVEC UN GC <= 2 PARCE QU'ON A PAS PU
		# CALCULER LEUR DABG AVEC APT :((
		$infos_sondes->{$_}->{'gc_content'} > 2
		and
		$infos_sondes->{$_}->{'nb_occ'} <= $nb_occ_max
		and
		$infos_sondes->{$_}->{'gc_content'} <= $gc_max
	} keys %{$infos_sondes}];

	# Si le gène a moins de six sondes avec de bon critères on zappe
	next if(@{$ids_probes_ok} < $nb_sondes_min_gene);

	# On récupère les valeurs de dabg de chaque sonde
	my @sondes_ba = ();
	my @sondes_dc = ();
	my @sondes_oj = ();

	# Pour chaque id de sonde
	foreach my $probe_id (@{$ids_probes_ok}){

		# On récupère les valeurs de dabg de la sonde
		$select_dabg_sth->execute($probe_id);
		my $dabg = $select_dabg_sth->fetchrow_hashref;
		$select_dabg_sth->finish;

		# On calcule le dabg de ab
		my $dabg_ba = dabg(
			$infos_analyse->{'design'}->[0]->{'control'},
			$dabg,
			$seuil_dabg
		);

		# On calcule le dabg de cd
		my $dabg_dc = dabg(
			$infos_analyse->{'design'}->[0]->{'test'},
			$dabg,
			$seuil_dabg
		);

		# Si la sonde est exprimée dans ab ou cd on prend
		if($dabg_ba || $dabg_dc){

			# On va chercher ses intensites
			$select_intensite_sth->execute($probe_id);
			my $sonde = $select_intensite_sth->fetchrow_hashref;
			$select_intensite_sth->finish;

			# Et on l'ajoute à la liste des sondes
			push(@sondes_ba, $sonde) if($dabg_ba);
			push(@sondes_dc, $sonde) if($dabg_dc);
			push(@sondes_oj, $sonde) if($dabg_ba && $dabg_dc);

		}

	}

	# Si il n'y a pas six sondes dans chaque comparaison on zappe
	next if(@sondes_ba < $nb_sondes_min_gene);
	next if(@sondes_dc < $nb_sondes_min_gene);
	next if(@sondes_oj < $nb_sondes_min_gene);

	# ======================================================================
	# Si le gène n'est pas homogène ça sert a rien de continuer
	# ======================================================================

	# On selectionne le nombre d'exons du gène
	$select_nb_exons_gene_sth->execute($id_gene);
	my($nb_exons) = $select_nb_exons_gene_sth->fetchrow_array;
	$select_nb_exons_gene_sth->finish;

	next if(!homogene(
		$infos_sondes,
		\@sondes_oj,
		$nb_exons,
		$nb_exon_min_homogene,
		$nb_min_par_exon_homogene
	));

	# ======================================================================
	# Analyse pour les trois comparaisons
	# ======================================================================

	# Fonction abstraite
	sub process{

		my($infos_analyse, $infos_sondes, $ref_sondes) = @_;

		my @fcs = map {
			median(fcs_sonde($infos_analyse, $_))
		} @{$ref_sondes};

		my $fc = median(@fcs);

		my $p_value = ttest((log2($fc) >= 0), log2(@fcs));

		my $nb_sondes = @{$ref_sondes};

		my $nb_exons = scalar(uniq(map {
			$infos_sondes->{$_->{'probe_id'}}->{'exon_pos'}
		} @{$ref_sondes}));

		return($fc, $p_value, $nb_sondes, $nb_exons);

	}

	# Comparaison B/A
	my($fc_ba, $p_value_ba, $nb_sondes_ba, $nb_exons_ba) = process(
		$infos_analyse->{'design'}->[0]->{'control'},
		$infos_sondes,
		\@sondes_ba
	);

	# Comparaison D/C
	my($fc_dc, $p_value_dc, $nb_sondes_dc, $nb_exons_dc) = process(
		$infos_analyse->{'design'}->[0]->{'test'},
		$infos_sondes,
		\@sondes_dc
	);

	# Comparaison O/J
	my($fc_oj, $p_value_oj, $nb_sondes_oj, $nb_exons_oj) = process(
		$infos_analyse->{'design'},
		$infos_sondes,
		\@sondes_oj
	);

	# ======================================================================
	# On ajoute le gène a la bdd
	# ======================================================================

	push(@genes, {
		'id_gene' => $id_gene,
		'fc_ba' => $fc_ba,
		'fc_dc' => $fc_dc,
		'fc_oj' => $fc_oj,
		'p_value_ba' => $p_value_ba,
		'p_value_dc' => $p_value_dc,
		'p_value_oj' => $p_value_oj,
		'nb_sondes_ba' => $nb_sondes_ba,
		'nb_sondes_dc' => $nb_sondes_dc,
		'nb_sondes_oj' => $nb_sondes_oj,
		'nb_exons_ba' => $nb_exons_ba,
		'nb_exons_dc' => $nb_exons_dc,
		'nb_exons_oj' => $nb_exons_oj
	});

}

# On calcule les pvalues ajustées
my @adjp_values_ba = adjust_pvals(map { $_->{'p_value_ba'} } @genes);
my @adjp_values_dc = adjust_pvals(map { $_->{'p_value_dc'} } @genes);
my @adjp_values_oj = adjust_pvals(map { $_->{'p_value_oj'} } @genes);

# On ajoute les gènes
for(my $i = 0; $i < @genes; $i++){

	$insert_gene_sth->execute(
		$genes[$i]->{'id_gene'},
		$genes[$i]->{'fc_ba'},
		$genes[$i]->{'fc_dc'},
		$genes[$i]->{'fc_oj'},
		$genes[$i]->{'p_value_ba'},
		$genes[$i]->{'p_value_dc'},
		$genes[$i]->{'p_value_oj'},
		$adjp_values_ba[$i],
		$adjp_values_dc[$i],
		$adjp_values_oj[$i],
		$genes[$i]->{'nb_sondes_ba'},
		$genes[$i]->{'nb_sondes_dc'},
		$genes[$i]->{'nb_sondes_oj'},
		$genes[$i]->{'nb_exons_ba'},
		$genes[$i]->{'nb_exons_dc'},
		$genes[$i]->{'nb_exons_oj'}
	);

}
