#!/usr/bin/perl
use strict;
use warnings;
use YAML::XS qw(LoadFile);
use DBI;
use List::MoreUtils qw(uniq);
use FindBin qw($Bin);
use lib $FindBin::Bin . '/../lib';
use Format;
use Math;
use Utils;
use Stats;
use Analyse;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');
my $limit = shift @ARGV // 18446744073709551615; # Si pas indiqué, on met maxint /

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Parametres pour l'analyse
my $gc_max = $config->{'compose'}{'gc_max'};
my $nb_occ_max = $config->{'compose'}{'nb_occ_max'};
my $seuil_dabg = $config->{'compose'}{'seuil_dabg'};
my $nb_sondes_min_gene = $config->{'compose'}{'nb_sondes_min_gene'};

# ==============================================================================
# On récupère les infos de l'exp
# ==============================================================================

# On se connecte a elexir
my $dbh = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

# On récupère les infos de l'analyse
my $analyse = Analyse->get_analyse($dbh, $id_analyse);

# Message d'erreur si l'analyse n'existe pas
die('L\'id de l\'analyse n\'est pas valide.') if(!$analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($analyse->{'type'} ne 'compose'){

	die('Le script composé ne fonctionne que sur les analyses composées :o)');

}

# ==============================================================================
# On crée les noms de table dont on a besoin
# ==============================================================================

my $id_projet = $analyse->{'id_project'};
my $type_chips = $analyse->{'type_chips'};
my $version = $analyse->{'version'};
my $orga = $analyse->{'organism'};
my $nb_paires_rep = $analyse->{'nb_paires_rep'};

my $table_genes = $config->{'table_genes'}{$version}{$orga};
my $table_sondes = $config->{'table_sondes'}{$type_chips}{$version}{$orga};
my $table_dabg = get_table_dabg($id_projet);
my $table_intensites = get_table_intensites($id_projet);
my $table_trans = get_table_transcription($id_projet, $id_analyse);

# ==============================================================================
# On prépare la requete pour les sondes avec ces infos
# ==============================================================================

# On selectionne les gènes
my $select_genes_sth = $dbh->prepare(
	"SELECT id_fasterdb, nb_exons FROM $table_genes LIMIT ?"
);

# On selectionne les sondes d'un gène
my $select_infos_sondes_sth = $dbh->prepare(
	"SELECT probe_id, nb_occ, gc_content, exon_pos
	FROM " . $table_sondes . "
	WHERE entite_type = 1
	AND utiliser_dans_analyse = 1
	AND gene_id = ?"
);

# On selectionne le dabg d'une sonde
my $select_dabg_sth = $dbh->prepare(
	"SELECT * FROM " . $table_dabg . " WHERE probe_id = ?"
);

# On selectionne l'intensité d'une sonde
my $select_intensite_sth = $dbh->prepare(
	"SELECT * FROM " . $table_intensites . " WHERE probe_id = ?"
);

# ==============================================================================
# On crée la table qui contient les valeurs des gène
# ==============================================================================

my @fields_fc_ba = ();
my @fields_fc_dc = ();
my @fields_fc_oj = ();

for(my $i = 0; $i < $nb_paires_rep; $i++){

	push(@fields_fc_ba, 'epi_fc_ba' . ($i + 1));
	push(@fields_fc_dc, 'epi_fc_dc' . ($i + 1));
	push(@fields_fc_oj, 'fc_oj' . ($i + 1));

}

my @fields_trans = (
	'id_gene INT UNSIGNED NOT NULL PRIMARY KEY',
	'trans_fc_ba DECIMAL(10,5) UNSIGNED NOT NULL',
	'trans_fc_dc DECIMAL(10,5) UNSIGNED NOT NULL',
	'fc_oj DECIMAL(10,5) UNSIGNED NOT NULL',
	'trans_pval_ba DECIMAL(12,10) UNSIGNED NOT NULL',
	'trans_pval_dc DECIMAL(12,10) UNSIGNED NOT NULL',
	'pval_oj DECIMAL(12,10) UNSIGNED NOT NULL',
	'trans_nb_sondes_ba SMALLINT UNSIGNED NOT NULL',
	'trans_nb_sondes_dc SMALLINT UNSIGNED NOT NULL',
	'nb_sondes_oj SMALLINT UNSIGNED NOT NULL',
	'trans_nb_exons_ba SMALLINT UNSIGNED NOT NULL',
	'trans_nb_exons_dc SMALLINT UNSIGNED NOT NULL',
	'nb_exons_oj SMALLINT UNSIGNED NOT NULL',
	(map { $_ . ' DECIMAL(10,5) UNSIGNED'} @fields_fc_ba),
	(map { $_ . ' DECIMAL(10,5) UNSIGNED'} @fields_fc_dc),
	(map { $_ . ' DECIMAL(10,5) UNSIGNED'} @fields_fc_oj)
);

$dbh->do('DROP TABLE IF EXISTS ' . $table_trans);
$dbh->do('CREATE TABLE ' . $table_trans . ' (' . join(', ', @fields_trans) . ')');

my $insert_gene_sth = $dbh->prepare(
	"INSERT INTO $table_trans VALUES(" . join(', ', ('?')x@fields_trans) . ")"
);

# ==============================================================================
# On début l'algo, pour chaque gène
# ==============================================================================

print 'Analyse des gènes' . "\n";

# Deux racourcis
my $analyse_ba = $analyse->{'design'}->[0]->{'cont'};
my $analyse_dc = $analyse->{'design'}->[0]->{'test'};
my $analyse_oj = $analyse;

# On selectionne les gènes
$select_genes_sth->execute($limit);

# Pour chaque gène
while(my($id_gene, $nb_exons) = $select_genes_sth->fetchrow_array){

	print $id_gene . "\n";

	# ======================================================================
	# On récupère les intensités des sondes du gène
	# ======================================================================

	# On récupère les infos des sondes
	$select_infos_sondes_sth->execute($id_gene);
	my $infos_sondes = $select_infos_sondes_sth->fetchall_hashref('probe_id');
	$select_infos_sondes_sth->finish;

	# Si le gène a moins de six sondes on zappe ça sert a rien
	next if(scalar(keys %{$infos_sondes}) < $nb_sondes_min_gene);

	# On vire les sondes qui ont pas les bonnes caractéristiques
	my $ids_probes_ok = [grep {
		# ON VIRE LES SONDES AVEC UN GC <= 2 PARCE QU'ON A PAS PU
		# CALCULER LEUR DABG AVEC APT :((
		$infos_sondes->{$_}->{'gc_content'} > 2
		and
		$infos_sondes->{$_}->{'nb_occ'} <= $nb_occ_max
		and
		$infos_sondes->{$_}->{'gc_content'} <= $gc_max
	} keys %{$infos_sondes}];

	# Si le gène a moins de six sondes avec de bon critères on zappe
	next if(@{$ids_probes_ok} < $nb_sondes_min_gene);

	# On récupère les valeurs de dabg de chaque sonde
	my @sondes_ba = ();
	my @sondes_dc = ();
	my @sondes_oj = ();

	# Pour chaque id de sonde
	foreach my $probe_id (@{$ids_probes_ok}){

		# On récupère les valeurs de dabg de la sonde
		$select_dabg_sth->execute($probe_id);
		my $dabg = $select_dabg_sth->fetchrow_hashref;
		$select_dabg_sth->finish;

		# On calcule le dabg de ab
		my $dabg_ba = $analyse_ba->dabg($dabg, $seuil_dabg);

		# On calcule le dabg de cd
		my $dabg_dc = $analyse_dc->dabg($dabg, $seuil_dabg);

		# Si la sonde est exprimée dans ab ou cd on prend
		if($dabg_ba || $dabg_dc){

			# On va chercher ses intensites
			$select_intensite_sth->execute($probe_id);
			my $sonde = $select_intensite_sth->fetchrow_hashref;
			$select_intensite_sth->finish;

			# Et on l'ajoute à la liste des sondes
			push(@sondes_ba, $sonde) if($dabg_ba);
			push(@sondes_dc, $sonde) if($dabg_dc);
			push(@sondes_oj, $sonde) if($dabg_ba && $dabg_dc);

		}

	}

	# Si il n'y a pas six sondes dans chaque comparaison on zappe
	next if(@sondes_ba < $nb_sondes_min_gene);
	next if(@sondes_dc < $nb_sondes_min_gene);
	next if(@sondes_oj < $nb_sondes_min_gene);

	# ======================================================================
	# Lissage transcriptionnel de B/A et D/C
	# ======================================================================

	my $ref_sondes_trans_ba = $analyse_ba->lissage_transcription(\@sondes_ba);
	my $ref_sondes_trans_dc = $analyse_dc->lissage_transcription(\@sondes_dc);

	# Si il n'y a pas 6 sondes dans une des exp on zappe
	next if(@{$ref_sondes_trans_ba} < $nb_sondes_min_gene);
	next if(@{$ref_sondes_trans_dc} < $nb_sondes_min_gene);

	# ======================================================================
	# Calcul des FCs des gènes
	# ======================================================================

	# FC des sondes
	my $ref_fcs_sondes_trans_ba = $analyse_ba->fcs_sondes($ref_sondes_trans_ba);
	my $ref_fcs_sondes_trans_dc = $analyse_dc->fcs_sondes($ref_sondes_trans_dc);
	my $ref_fcs_sondes_oj = $analyse_oj->fcs_sondes(\@sondes_oj);

	# FC gene sans effet rep
	my($fc_trans_ba, $pvalue_trans_ba) = $analyse_ba->fc_gene($ref_fcs_sondes_trans_ba);
	my($fc_trans_dc, $pvalue_trans_dc) = $analyse_dc->fc_gene($ref_fcs_sondes_trans_dc);
	my($fc_oj, $pvalue_oj) = $analyse_oj->fc_gene($ref_fcs_sondes_oj);

	# ======================================================================
	# On fait l'épissage seulement si le gène est homogène
	# ======================================================================

	my $ref_fcs_epi_ba = [(undef)x$nb_paires_rep];
	my $ref_fcs_epi_dc = [(undef)x$nb_paires_rep];
	my $ref_fcs_oj = [(undef)x$nb_paires_rep];

	# Si O/J est homogène, les deux autres le sont aussi, ses sondes sont
	# l'intersection des sondes de ba et dc)
	my $homogene = homogene($infos_sondes, \@sondes_oj, $nb_exons);

	if($homogene){

		# ==============================================================
		# Lissage d'épissage pour B/A et D/C
		# ==============================================================

		my $ref_sondes_epi_ba = $analyse_ba->lissage_epissage(\@sondes_ba);
		my $ref_sondes_epi_dc = $analyse_dc->lissage_epissage(\@sondes_dc);

		# On continue seulement si le gène a au moins 6 sondes qui passe
		# le lissage épissage dans les deux exp
		if(@{$ref_sondes_epi_ba} >= $nb_sondes_min_gene
			and @{$ref_sondes_epi_dc} >= $nb_sondes_min_gene){

			# ======================================================
			# Calcul des fold change du gène par replicat
			# ======================================================

			my $ref_fcs_sondes_epi_ba = $analyse_ba->fcs_sondes(
				$ref_sondes_epi_ba
			);

			my $ref_fcs_sondes_epi_dc = $analyse_dc->fcs_sondes(
				$ref_sondes_epi_dc
			);

			$ref_fcs_epi_ba = rep_effect($ref_fcs_sondes_epi_ba);
			$ref_fcs_epi_dc = rep_effect($ref_fcs_sondes_epi_dc);
			$ref_fcs_oj = rep_effect($ref_fcs_sondes_oj);

		}

	}

	# ======================================================================
	# On compte les sondes pour chaque exp
	# ======================================================================

	# Nombre de sondes
	my $nb_sondes_trans_ba = @{$ref_sondes_trans_ba};
	my $nb_sondes_trans_dc = @{$ref_sondes_trans_dc};
	my $nb_sondes_oj = @sondes_oj;

	# Nombre d'exons concernés
	my $nb_exons_trans_ba = scalar(uniq(map {
		$infos_sondes->{$_->{'probe_id'}}->{'exon_pos'}
	} @sondes_ba));

	my $nb_exons_trans_dc = scalar(uniq(map {
		$infos_sondes->{$_->{'probe_id'}}->{'exon_pos'}
	} @sondes_dc));

	my $nb_exons_oj = scalar(uniq(map {
		$infos_sondes->{$_->{'probe_id'}}->{'exon_pos'}
	} @sondes_oj));

	# ======================================================================
	# On ajoute le gène a la bdd
	# ======================================================================

	$insert_gene_sth->execute(
		$id_gene,
		$fc_trans_ba,
		$fc_trans_dc,
		$fc_oj,
		$pvalue_trans_ba,
		$pvalue_trans_dc,
		$pvalue_oj,
		$nb_sondes_trans_ba,
		$nb_sondes_trans_dc,
		$nb_sondes_oj,
		$nb_exons_trans_ba,
		$nb_exons_trans_dc,
		$nb_exons_oj,
		@{$ref_fcs_epi_ba},
		@{$ref_fcs_epi_dc},
		@{$ref_fcs_oj}
	);

}
