#!/usr/bin/perl
use warnings;
use strict;
use YAML::XS qw(LoadFile);
use DBI;
use File::Path qw(make_path);
use Spreadsheet::WriteExcel;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../lib";
use Format;
use Math;
use Analyse;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Paramètres de sélection pour les résulats
my $seuil_trans = $config->{'compose'}{'excel'}{'seuil_trans_simple'};
my $seuil_trans_j_vs_o = $config->{'compose'}{'excel'}{'seuil_trans_j_vs_o'};
my $seuil_pval = $config->{'simple'}{'excel'}{'seuil_pval'};

# Répertoire de sortie 
my $dir_xls = $config->{'dir_xls'};

# ==============================================================================
# On récupère les infos de l'analyse
# ==============================================================================

my $dbh = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

my $analyse = Analyse->get_analyse($dbh, $id_analyse);

die('L\'id de l\'analyse n\'est pas valide.') if(!$analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($analyse->{'type'} ne 'compose'){

	die('Le script composé ne fonctionne que sur les analyses composées :o)');

}

# ==============================================================================
# On récupère les infos dont on a besoin selon les infos de l'analyse
# ==============================================================================

# On récupère les infos de la bdd
my $id_projet = $analyse->{"id_project"};
my $type_chips = $analyse->{'type_chips'};
my $version = $analyse->{'version'};
my $orga = $analyse->{'organism'};
my $name = $analyse->{'name'};

# on crée les variables du script qui déendent de l'analyse
my $table_genes = $config->{'table_genes'}{$version}{$orga};
my $table_trans = get_table_transcription($id_projet, $id_analyse);
my $dir_sortie = $dir_xls . '/' . $id_projet . '/' . $id_analyse;
my $nom_fichier = $name . '_transcription.xls';
my $fichier_sortie = $dir_sortie . '/' . $nom_fichier;

# On crée le répertoire de sortie au cas ou il existe pas
make_path($dir_sortie);

# ==============================================================================
# On se connecte a fasterdb et on prépare les requetes
# ==============================================================================

my $select_nb_genes_total_sth = $dbh->prepare(
	"SELECT COUNT(*) FROM $table_genes"
);

my $select_nb_genes_exp_sth = $dbh->prepare(
	"SELECT COUNT(*) FROM $table_trans"
);

my $select_genes_sth = $dbh->prepare(
	"SELECT * FROM $table_trans
	WHERE ABS(LOG2(trans_fc_ba)) >= LOG2(?) AND trans_pval_ba <= ?"
);

my $select_infos_gene_sth = $dbh->prepare(
	"SELECT * FROM $table_genes WHERE id_fasterdb = ?"
);

# ==============================================================================
# Initialisation fichier excel
# ==============================================================================

# On crée un fichier excel
my $xlsh = Spreadsheet::WriteExcel->new($fichier_sortie);

# On ajoute les pages
my $f_resume			= $xlsh->add_worksheet('Resume de l\'analyse');
my $f_up			= $xlsh->add_worksheet('BA > ' . $seuil_trans);
my $f_down			= $xlsh->add_worksheet('BA < -' . $seuil_trans);

# On défini les couleurs
my $couleur_entete		= $xlsh->set_custom_color(39, 189, 189, 189);
my $couleur_up			= $xlsh->set_custom_color(40, 255, 204, 153);
my $couleur_down		= $xlsh->set_custom_color(41, 204, 255, 204);
my $couleur_mauv_fc		= $xlsh->set_custom_color(45, 255, 102, 102);

# On définit les format d'affichage
my $format_resume_titre		= $xlsh->add_format(color => 'black', bold => 1, center_across => 1);
my $format_cell_center		= $xlsh->add_format(color => 'black', bold => 0, center_across => 1);
my $format_cell_no_center	= $xlsh->add_format(color => 'black', bold => 0);
my $format_entete		= $xlsh->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_entete_merge		= $xlsh->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_up			= $xlsh->add_format(color => 'black', bg_color => $couleur_up, border => 1, border_color => 'black', center_across => 1);
my $format_down			= $xlsh->add_format(color => 'black', bg_color => $couleur_down, border => 1, border_color => 'black', center_across => 1);
my $format_mauv_fc		= $xlsh->add_format(color => 'black', bg_color => $couleur_mauv_fc, border => 1, border_color => 'black', center_across => 1);

# ==============================================================================
# On ajoute les gènes dans la feuille
# ==============================================================================

# On selectionne les gènes régulés
$select_genes_sth->execute($seuil_trans, $seuil_pval);
my @genes = @{$select_genes_sth->fetchall_arrayref({})};
$select_genes_sth->finish;

# On récupère les gènes qui ont B/A up et ceux qui ont B/A down
my @genes_ba_up = grep { $_->{'trans_fc_ba'} >= 1 } @genes;
my @genes_ba_down = grep { $_->{'trans_fc_ba'} < 1 } @genes;

# On écrit ces deux listes de gène, chacune dans la feuille appropriée
my($nb_ups_renforces, $nb_ups_affaiblits) = write_list(
	$f_up,
	@genes_ba_up
);

my($nb_downs_renforces, $nb_downs_affaiblits) = write_list(
	$f_down,
	@genes_ba_down
);

# Fonction pour remplir une feuille
sub write_list{

	my($f, @genes) = @_;

	# On modifie la largeur des colones
	$f->set_column(0, 0, 12); # Fasterdb id
	$f->set_column(1, 1, 18); # Source id
	$f->set_column(2, 2, 12); # Symbol
	$f->set_column(3, 3, 30); # Description
	$f->set_column(4, 4, 24); # Pos chrom
	$f->set_column(5, 5, 12); # Regulation
	$f->set_column(6, 6, 8); # FC
	$f->set_column(7, 7, 12); # pval
	$f->set_column(8, 8, 12); # nb probes

	# On fait les premiers entetes
	$f->merge_range(0, 0, 0, 4, 'Infos Gene', $format_entete_merge);
	$f->merge_range(0, 6, 0, 10, 'Regulation B/A', $format_entete_merge);
	$f->merge_range(0, 12, 0, 16, 'Regulation D/C', $format_entete_merge);
	$f->merge_range(0, 18, 0, 22, 'Regulation O/J', $format_entete_merge);

	# On défini les entetes
	my @entetes = ();

	# Infos du gène
	push(@entetes, 'Fasterdb id');
	push(@entetes, 'Source id');
	push(@entetes, 'Symbol');
	push(@entetes, 'Description');
	push(@entetes, 'Chr Position');
	push(@entetes, ''); # Space

	# Regulation B/A
	push(@entetes, 'Reg');
	push(@entetes, 'FC');
	push(@entetes, 'Pvalue');
	push(@entetes, 'Nb probes');
	push(@entetes, 'Nb exons');
	push(@entetes, ''); # Space

	# Regulation D/C
	push(@entetes, 'Reg');
	push(@entetes, 'FC');
	push(@entetes, 'Pvalue');
	push(@entetes, 'Nb probes');
	push(@entetes, 'Nb exons');
	push(@entetes, ''); # Space

	# Regulation O/J
	push(@entetes, 'Reg');
	push(@entetes, 'FC');
	push(@entetes, 'Pvalue');
	push(@entetes, 'Nb probes');
	push(@entetes, 'Nb exons');

	for(my $j = 0; $j < @entetes; $j++){

		my $format = ($entetes[$j] ne '') ? $format_entete : undef;

		$f->write(1, $j, $entetes[$j], $format);

	}

	# On compte les renforcés et les affaiblit
	my $nb_renforces = 0;
	my $nb_affaiblits = 0;

	# On classe les gènes
	@genes = sort {
		# déjà on classe par fc fort/fc faible
		format_fold($b->{'fc_oj'}) >= $seuil_trans_j_vs_o
		<=>
		format_fold($a->{'fc_oj'}) >= $seuil_trans_j_vs_o
		||
		# Puis par fc_oj qui renforce ou affaiblit
		$b->{'fc_oj'} >= 1 <=> $a->{'fc_oj'} >= 1
		||
		# Puis par fc_oj décroissant
		format_fold($b->{'fc_oj'}) <=> format_fold($a->{'fc_oj'})
	} @genes;

	# On affiche chaque gène
	for(my $i = 0; $i < @genes; $i++){

		my $gene = $genes[$i];

		# On récupère les infos du gène
		$select_infos_gene_sth->execute($gene->{'id_gene'});
		my $infos_gene = $select_infos_gene_sth->fetchrow_hashref;
		$select_infos_gene_sth->finish;

		# On formatte les infos
		$infos_gene->{'description'} =~ s/\[.+\]$//;

		my $pos_chrom =
			$infos_gene->{'chromosome'} .
			':' . $infos_gene->{'start_sur_chromosome'} .
			'-' . $infos_gene->{'end_sur_chromosome'} .
			':' . $infos_gene->{'strand'};

		my $reg_ba = ($gene->{'trans_fc_ba'} >= 1) ? 'up' : 'down';
		my $reg_dc = ($gene->{'trans_fc_dc'} >= 1) ? 'up' : 'down';
		my $reg_oj;
		my $format;

		# On défini la regulation de O/J
		if($gene->{'trans_fc_ba'} >= 1){

			if($gene->{'fc_oj'} >= 1){

				$reg_oj = 'Renforce';
				$format = $format_up;
				$nb_renforces++;

			}else{

				$reg_oj = 'Affaiblit';
				$format = $format_down;
				$nb_affaiblits++;

			}

		}else{

			if($gene->{'fc_oj'} >= 1){

				$reg_oj = 'Affaiblit';
				$format = $format_down;
				$nb_affaiblits++;

			}else{

				$reg_oj = 'Renforce';
				$format = $format_up;
				$nb_renforces++;

			}

		}

		# Si O/J est trop faible on lui donne un format spécial
		if(format_fold($gene->{'fc_oj'}) < $seuil_trans_j_vs_o){

			$format = $format_mauv_fc;

		}

		# On crée le tableau de data
		my @data = ();

		# Infos du gène
		push(@data, $infos_gene->{'id_fasterdb'});
		push(@data, $infos_gene->{'id_source'});
		push(@data, $infos_gene->{'symbol'});
		push(@data, $infos_gene->{'description'});
		push(@data, $pos_chrom);
		push(@data, '');

		# Regulation B/A
		push(@data, $reg_ba);
		push(@data, round(format_fold($gene->{'trans_fc_ba'}), 2));
		push(@data, $gene->{'trans_pval_ba'});
		push(@data, $gene->{'trans_nb_sondes_ba'});
		push(@data, $gene->{'trans_nb_exons_ba'});
		push(@data, '');

		# Regulation D/C
		push(@data, $reg_dc);
		push(@data, round(format_fold($gene->{'trans_fc_dc'}), 2));
		push(@data, $gene->{'trans_pval_dc'});
		push(@data, $gene->{'trans_nb_sondes_dc'});
		push(@data, $gene->{'trans_nb_exons_dc'});
		push(@data, '');

		# Regulation O/J
		push(@data, $reg_oj);
		push(@data, round(format_fold($gene->{'fc_oj'}), 2));
		push(@data, $gene->{'pval_oj'});
		push(@data, $gene->{'nb_sondes_oj'});
		push(@data, $gene->{'nb_exons_oj'});

		# On affiche les data
		for(my $j = 0; $j < @data; $j++){

			my $format = ($data[$j] ne '') ? $format : undef;

			# i+2 parce que les deux premières lignes sont les entetes
			$f->write($i + 2, $j, $data[$j], $format);

		}

	}

	return($nb_renforces, $nb_affaiblits);

}

# ==============================================================================
# On écrit la page de résumé
# ==============================================================================

$select_nb_genes_total_sth->execute;
my($nb_genes_total) = $select_nb_genes_total_sth->fetchrow_array;
$select_nb_genes_total_sth->finish;

$select_nb_genes_exp_sth->execute;
my($nb_genes_exp) = $select_nb_genes_exp_sth->fetchrow_array;
$select_nb_genes_exp_sth->finish;

my $nb_renforces = $nb_ups_renforces + $nb_downs_renforces;
my $nb_affaiblits = $nb_ups_affaiblits + $nb_downs_affaiblits;
my $nb_regules = $nb_renforces + $nb_affaiblits;

$f_resume->set_column(0, 0, 30);
$f_resume->write(0, 0, date(), $format_cell_center);
$f_resume->write(2, 0, "Parametres utilises", $format_resume_titre);
$f_resume->write(3, 0, "Seuil fold B/A", $format_cell_center);
$f_resume->write(3, 1, round($seuil_trans, 2), $format_cell_center);
$f_resume->write(4, 0, "Seuil effet O/J", $format_cell_center);
$f_resume->write(4, 1, round($seuil_trans_j_vs_o, 2), $format_cell_center);
$f_resume->write(5, 0, "Seuil p-value", $format_cell_center);
$f_resume->write(5, 1, $seuil_pval, $format_cell_center);
$f_resume->write(7, 0, "Resultats", $format_resume_titre);
$f_resume->write(8, 0, "Genes total", $format_cell_center);
$f_resume->write(8, 1, $nb_genes_total, $format_cell_center);
$f_resume->write(9, 0, "Genes exprimes", $format_cell_center);
$f_resume->write(9, 1, $nb_genes_exp, $format_cell_center);
$f_resume->write(10, 0, "Genes regules", $format_cell_center);
$f_resume->write(10, 1, $nb_regules, $format_cell_center);
$f_resume->write(11, 0, "Genes renforces", $format_cell_center);
$f_resume->write(11, 1, $nb_renforces, $format_cell_center);
$f_resume->write(11, 0, "Genes affaiblis", $format_cell_center);
$f_resume->write(11, 1, $nb_affaiblits, $format_cell_center);

# On écrit le nom des puces utilisés
$f_resume->set_column(4, 4, 20);
$f_resume->set_column(5, 5, 20);
$f_resume->set_column(6, 6, 50);

$f_resume->write(2, 4, 'Exp. Design', $format_resume_titre);
$f_resume->write(3, 4, 'Comparaison', $format_cell_center);
$f_resume->write(3, 5, 'D/C vs B/A', $format_cell_center);
$f_resume->write(5, 4, 'Lettre', $format_resume_titre);
$f_resume->write(5, 5, 'Condition', $format_resume_titre);
$f_resume->write(5, 6, 'Puce', $format_resume_titre);

my $i = 6;

foreach my $letter (keys %{$analyse->{'chip_desc'}}){

	foreach my $desc (@{$analyse->{'chip_desc'}->{$letter}}){

		$f_resume->write($i, 4, $letter, $format_cell_center);
		$f_resume->write($i, 5, $desc->{'sample'}, $format_cell_center);
		$f_resume->write($i, 6, $desc->{'name'}, $format_cell_center);

		$i++;

	}

}

# On écrit le nom de fichier sur STDOUT pour pouvoir le passer au script zip
print $nom_fichier;
