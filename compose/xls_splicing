#!/usr/bin/perl
use warnings;
use strict;
use YAML::XS qw(LoadFile);
use DBI;
use File::Path qw(make_path);
use Spreadsheet::WriteExcel;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../lib";
use Format;
use Math qw(round);
use Analyse::RequetesCourantes;
use Traitement_resultats::FonctionsXls;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# -- Paramètres de sélection pour les résulats -- #
my $seuil_epissage_simple = $config->{'compose'}{'excel'}{'seuil_epissage_simple'};
my $seuil_epissage_j_vs_o = $config->{'compose'}{'excel'}{'seuil_epissage_j_vs_o'};
my $seuil_pval = $config->{'compose'}{'excel'}{'seuil_pval'};
my $seuil_fiabilite_fcGene = $config->{'compose'}{'excel'}{'seuil_fc_gene'};

# Répertoire de sortie 
my $dir_xls = $config->{'dir_xls'};

# ==============================================================================
# Connection à elexir et préparation des requetes
# ==============================================================================

my $probes_db = DBI->connect(
	"DBI:mysql:" . $db_name . ":" . $db_host,
	$db_user,
	$db_pass
);

# On selectionne les infos de l'analyse
my $select_infos_analyse_sth = $probes_db->prepare(
	"SELECT p.id AS id_project, p.organism, a.name, a.version, a.type,
	COUNT(DISTINCT ca.name) AS nb_rep_cont, COUNT(DISTINCT cb.name) AS nb_rep_test
	FROM analyses AS a, projects AS p, groups AS la, groups AS lb, chips AS ca, chips AS cb
	WHERE a.id_project = p.id
	AND a.id = la.id_analysis
	AND a.id = lb.id_analysis
	AND la.letter = 'A'
	AND lb.letter = 'B'
	AND p.id = ca.id_project
	AND p.id = cb.id_project
	AND la.`condition` = ca.`condition`
	AND lb.`condition` = cb.`condition`
	AND a.id = ?
	GROUP BY p.id"
);

# ==============================================================================
# On récupère les infos de l'analyse
# ==============================================================================

$select_infos_analyse_sth->execute($id_analyse);

my $infos_analyse = $select_infos_analyse_sth->fetchrow_hashref;

die('L\'id de l\'analyse n\'est pas valide.') if(!$infos_analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($infos_analyse->{'type'} ne 'compose'){

	die('Le script composé ne fonctionne que sur les analyses composées :o)');

}

# ==============================================================================
# On récupère les infos dont on a besoin selon les infos de l'analyse
# ==============================================================================

my $id_projet = $infos_analyse->{'id_project'};
my $version = $infos_analyse->{'version'};
my $orga = $infos_analyse->{'organism'};
my $nb_repl_cont = $infos_analyse->{'nb_rep_cont'};
my $nb_repl_test = $infos_analyse->{'nb_rep_test'};
my $name = $infos_analyse->{'name'};

# on crée les variables du script qui déendent de l'analyse
my $base_fasterdb = $config->{'db_name_fasterdb'}{$version}{$orga};
my $table_splicing = get_table_splicing($id_projet, $id_analyse);
my $table_entites = $config->{'table_entites'}{$version}{$orga};
my $dir_sortie = $dir_xls . '/' . $id_projet . '/' . $id_analyse;
my $fichier_sortie = $dir_sortie . '/' . $name . '_epissage.xls';

# On crée les dossier
make_path($dir_sortie);

# ==============================================================================
# On se connecte a fasterdb
# ==============================================================================

my $faster_db = DBI->connect(
	"DBI:mysql:" . $base_fasterdb . ":" . $db_host,
	$db_user,
	$db_pass
);

# ==============================================================================
# On initialise le fichier
# ==============================================================================

my $resultat = Spreadsheet::WriteExcel->new($fichier_sortie);
my $f_notice = $resultat->add_worksheet('Resume de l\'analyse');
my $f_transcription_no_fdr_ba_inclusion = $resultat->add_worksheet('NO FDR - B vs A > 1.5');
my $f_transcription_no_fdr_ba_exclusion = $resultat->add_worksheet('NO FDR - B vs A < -1.5');
my $f_transcription_fdr_ba_inclusion = $resultat->add_worksheet('FDR - B vs A > 1.5');
my $f_transcription_fdr_ba_exclusion = $resultat->add_worksheet('FDR - B vs A < -1.5');

#-------------------------------------------------------------------#
#                           Formats du fichier                      #
#-------------------------------------------------------------------#

# Couleurs
my $couleur_entete = $resultat->set_custom_color(39, 189, 189, 189);
my $couleur_up     = $resultat->set_custom_color(40, 255, 204, 153);
my $couleur_down   = $resultat->set_custom_color(41, 204, 255, 204);

# Formats
my $format_resume_titre   = $resultat->add_format(color => 'black', bold => 1, center_across => 1);
my $format_resume_cell    = $resultat->add_format(color => 'black', bold => 0, center_across => 1);
my $format_cell_no_center = $resultat->add_format(color => 'black', bold => 0);
my $format_entete         = $resultat->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_merge_entete   = $resultat->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_up             = $resultat->add_format(color => 'black', bg_color => $couleur_up, border => 1, border_color => 'black', center_across => 1);
my $format_down           = $resultat->add_format(color => 'black', bg_color => $couleur_down, border => 1, border_color => 'black', center_across => 1);
my $format_cell_mauv      = $resultat->add_format(color => 'red', border => 0, border_color => 'black', center_across => 1);


#-------------------------------------------------------------------#
#                          Données à afficher                       #
#-------------------------------------------------------------------#

# On set la largeur des colonnes
setting_columns($f_transcription_no_fdr_ba_inclusion);
setting_columns($f_transcription_fdr_ba_inclusion);
setting_columns($f_transcription_no_fdr_ba_exclusion);
setting_columns($f_transcription_fdr_ba_exclusion);

# Colonnes d'en-tête mergées
merging_columns($f_transcription_no_fdr_ba_inclusion);
merging_columns($f_transcription_fdr_ba_inclusion);
merging_columns($f_transcription_no_fdr_ba_exclusion);
merging_columns($f_transcription_fdr_ba_exclusion);

# En-tetes des onglets
my @entete = ('Fasterdb id', 'Symbol', 'Name', 'Human Ensembl id', 'Mouse Ensembl id', 'Chr Position', 'AS Event Type', 'Exon position', 'Concat geneId_exonPosition', 'AS Event Sequence', 'Link Elexir', 'Regulation', 'SI B/A', 'Pvalue', 'Est fiable', 'Nb probes', 'Link Elexir', 'Regulation', 'SI D/C', 'Pvalue', 'Est fiable', 'Nb probes', 'Regulation', 'SI J/O', 'Pvalue', 'Est fiable', 'Nb probes');

# Ecriture
&FonctionsXls::ecriture(\@entete, $f_transcription_no_fdr_ba_inclusion, 0, $format_entete);
&FonctionsXls::ecriture(\@entete, $f_transcription_fdr_ba_inclusion, 0, $format_entete);
&FonctionsXls::ecriture(\@entete, $f_transcription_no_fdr_ba_exclusion, 0, $format_entete);
&FonctionsXls::ecriture(\@entete, $f_transcription_fdr_ba_exclusion, 0, $format_entete);

#-------------------------------------------------------------------#
#                              Traitement                           #
#-------------------------------------------------------------------#

# ---------------------------- Resume ----------------------------- #

# Date
$f_notice->write(0, 0, date(), $format_cell_no_center);

# Paramètres utilisés
$f_notice->write(2, 0, "Parametres utilises", $format_resume_titre);
my @parametre_si_ba   = ("Seuil SI B/A", $seuil_epissage_simple);
my @parametre_pval_ba = ("Seuil p-value B/A ", $seuil_pval);
my @parametre_si_jo   = ("Seuil SI J/O", $seuil_epissage_j_vs_o);
my @parametre_pval_jo = ("Seuil p-value J/O ", $seuil_pval);
&FonctionsXls::ecriture(\@parametre_si_ba, $f_notice, 3, $format_resume_cell);
&FonctionsXls::ecriture(\@parametre_pval_ba, $f_notice, 4, $format_resume_cell);
&FonctionsXls::ecriture(\@parametre_si_jo, $f_notice, 5, $format_resume_cell);
&FonctionsXls::ecriture(\@parametre_pval_jo, $f_notice, 6, $format_resume_cell);

my $select;

# Traduction du type
my %name2num = (
    'exon' => 1,
    'prom' => 2,
    'polya' => 3,
    'intron-retention' => 4,
    'donor' => 5,
    'acceptor' => 6,
    'deletion' => 7
);

# Récupération des événements B/A régulés
my %hash_ba_inclusion_no_fdr = ();
my %hash_ba_inclusion_fdr    = ();
my %hash_ba_exclusion_no_fdr = ();
my %hash_ba_exclusion_fdr    = ();
my $requete_ba_inclusion =
        "SELECT id_entite, entite_type, gene_id, SI_ba, SI_pval_ba, SI_adjp_ba, nb_sondes_ba, is_robust_ba
        FROM $table_splicing 
        WHERE is_robust_ba = 1";

$select = $probes_db->prepare($requete_ba_inclusion);
$select -> execute;
while( my ($entite_id, $entite_type, $gene_id, $si, $pval, $adjp, $nb_sondes, $est_fiable) = $select -> fetchrow_array){

    $entite_type = $name2num{$entite_type};

    my $entite_ID = "$entite_type-$entite_id";

    my $si_a_tester = ($si >= 1) ? $si : -1/$si;

    # B/A <= -1.45 -> Exclusion
    if($si_a_tester <= -$seuil_epissage_simple) {
    
	    if( $pval <= $seuil_pval ){
	        $hash_ba_exclusion_no_fdr{$gene_id}->{$entite_ID}->{"si"}         = $si;
	        $hash_ba_exclusion_no_fdr{$gene_id}->{$entite_ID}->{"pval"}       = $pval;
	        $hash_ba_exclusion_no_fdr{$gene_id}->{$entite_ID}->{"nb_sondes"}  = $nb_sondes;
	        $hash_ba_exclusion_no_fdr{$gene_id}->{$entite_ID}->{"est_fiable"} = $est_fiable;
	    }
        if( $adjp <= $seuil_pval ){
	        $hash_ba_exclusion_fdr{$gene_id}->{$entite_ID}->{"si"}         = $si;
	        $hash_ba_exclusion_fdr{$gene_id}->{$entite_ID}->{"pval"}       = $adjp;
	        $hash_ba_exclusion_fdr{$gene_id}->{$entite_ID}->{"nb_sondes"}  = $nb_sondes;
	        $hash_ba_exclusion_fdr{$gene_id}->{$entite_ID}->{"est_fiable"} = $est_fiable;
        }
    
    # B/A >= 1.45 -> Inclusion
    }elsif($si_a_tester >= $seuil_epissage_simple){
    
	    if( $pval <= $seuil_pval ){
	        $hash_ba_inclusion_no_fdr{$gene_id}->{$entite_ID}->{"si"}         = $si;
	        $hash_ba_inclusion_no_fdr{$gene_id}->{$entite_ID}->{"pval"}       = $pval;
	        $hash_ba_inclusion_no_fdr{$gene_id}->{$entite_ID}->{"nb_sondes"}  = $nb_sondes;
	        $hash_ba_inclusion_no_fdr{$gene_id}->{$entite_ID}->{"est_fiable"} = $est_fiable;
	    }
        if( $adjp <= $seuil_pval ){
	        $hash_ba_inclusion_fdr{$gene_id}->{$entite_ID}->{"si"}         = $si;
	        $hash_ba_inclusion_fdr{$gene_id}->{$entite_ID}->{"pval"}       = $adjp;
	        $hash_ba_inclusion_fdr{$gene_id}->{$entite_ID}->{"nb_sondes"}  = $nb_sondes;
	        $hash_ba_inclusion_fdr{$gene_id}->{$entite_ID}->{"est_fiable"} = $est_fiable;
        }
    
    }

}
$select -> finish;


# Récupération des événements D/C
my %hash_dc_no_fdr = ();
my %hash_dc_fdr = ();
my $requete_dc =
        "SELECT id_entite, entite_type, gene_id,
	SI_dc, SI_pval_dc, SI_adjp_dc, nb_sondes_dc, is_robust_dc
        FROM $table_splicing";

$select = $probes_db->prepare($requete_dc);
$select -> execute;
while( my ($entite_id, $entite_type, $gene_id, $si, $pval, $adjp, $nb_sondes, $est_fiable) = $select -> fetchrow_array){

    $entite_type = $name2num{$entite_type};

    my $entite_ID = "$entite_type-$entite_id";

	$hash_dc_no_fdr{$gene_id}->{$entite_ID}->{"si"}         = $si;
	$hash_dc_no_fdr{$gene_id}->{$entite_ID}->{"pval"}       = $pval;
	$hash_dc_no_fdr{$gene_id}->{$entite_ID}->{"nb_sondes"}  = $nb_sondes;
	$hash_dc_no_fdr{$gene_id}->{$entite_ID}->{"est_fiable"} = $est_fiable;

	$hash_dc_fdr{$gene_id}->{$entite_ID}->{"si"}         = $si;
	$hash_dc_fdr{$gene_id}->{$entite_ID}->{"pval"}       = $adjp;
	$hash_dc_fdr{$gene_id}->{$entite_ID}->{"nb_sondes"}  = $nb_sondes;
	$hash_dc_fdr{$gene_id}->{$entite_ID}->{"est_fiable"} = $est_fiable;

}
$select -> finish;

# Récupération des événements J/O
my %hash_jo_no_fdr = ();
my %hash_jo_fdr = ();
my $requete_jo =
        "SELECT id_entite, entite_type, gene_id,
        SI_oj, SI_pval_oj, SI_adjp_oj, nb_sondes_oj, is_robust_oj
        FROM $table_splicing";

$select = $probes_db->prepare($requete_jo);
$select -> execute;
while( my ($entite_id, $entite_type, $gene_id, $si, $pval, $adjp, $nb_sondes, $est_fiable) = $select -> fetchrow_array){

    $entite_type = $name2num{$entite_type};

    my $entite_ID = "$entite_type-$entite_id";

	$hash_jo_no_fdr{$gene_id}->{$entite_ID}->{"si"}         = $si;
	$hash_jo_no_fdr{$gene_id}->{$entite_ID}->{"pval"}       = $pval;
	$hash_jo_no_fdr{$gene_id}->{$entite_ID}->{"nb_sondes"}  = $nb_sondes;
	$hash_jo_no_fdr{$gene_id}->{$entite_ID}->{"est_fiable"} = $est_fiable;

	$hash_jo_fdr{$gene_id}->{$entite_ID}->{"si"}         = $si;
	$hash_jo_fdr{$gene_id}->{$entite_ID}->{"pval"}       = $adjp;
	$hash_jo_fdr{$gene_id}->{$entite_ID}->{"nb_sondes"}  = $nb_sondes;
	$hash_jo_fdr{$gene_id}->{$entite_ID}->{"est_fiable"} = $est_fiable;

}
$select -> finish;

# ------------------------- Récup infos --------------------------- #

my ($h_genes_ortholgues_humain, $h_genes_ortholgues_souris) = &RequetesCourantes::requete_genes_orthologues($faster_db);

my $h_genes_carac = &RequetesCourantes::requete_genes_caracteristiques($faster_db);


# ------------------------- Résultats --------------------------- #

# B/A inclusion NO FDR
process("inclusion", \%hash_ba_inclusion_no_fdr, \%hash_dc_no_fdr, \%hash_jo_no_fdr, $f_transcription_no_fdr_ba_inclusion);

# B/A inclusion FDR
process("inclusion", \%hash_ba_inclusion_fdr, \%hash_dc_fdr, \%hash_jo_fdr, $f_transcription_fdr_ba_inclusion);

# B/A inclusion NO FDR
process("exclusion", \%hash_ba_exclusion_no_fdr, \%hash_dc_no_fdr, \%hash_jo_no_fdr, $f_transcription_no_fdr_ba_exclusion);

# B/A exclusion FDR
process("exclusion", \%hash_ba_exclusion_fdr, \%hash_dc_fdr, \%hash_jo_fdr, $f_transcription_no_fdr_ba_exclusion);

# ------------------------------------------------------------------ #
#                              Subroutines                           #
# ------------------------------------------------------------------ #

sub setting_columns {
    my($feuille) = @_;

    $feuille->set_column(0, 30, 11);
    $feuille->set_column(2, 4, 22);
    $feuille->set_column(5, 5, 24);
    $feuille->set_column(6, 6, 14);
    $feuille->set_column(7, 9, 22);
    $feuille->set_column(8, 8, 25);

}
# ------------------------------------------------------------------ #
sub merging_columns{
    my($feuille) = @_;
    
=pud
    $feuille->merge_range('A1:F1', 'Gene information', $format_merge_entete);
    $feuille->merge_range('G1:I1', 'Event information', $format_merge_entete);
    $feuille->merge_range('J1:O1', 'B/A = O', $format_merge_entete);
    $feuille->merge_range('P1:U1', 'D/C = J', $format_merge_entete);
    $feuille->merge_range('V1:Z1', 'J/O = P', $format_merge_entete);
=cut
	
}
#------------------------------------------------------------------#
sub process {

    my ($type_event_ba, $hash_reg_ba, $hash_dc, $hash_jo, $feuille) = @_;
    
    my $num_ligne = 1;

    # Traitement gène par gène des gènes régulés en B/A
    while(my ($gene_id, $hash_entites) = each %$hash_reg_ba){

	    # On récupère les infos du gène courant
	        
	    my $gene_infos   = $h_genes_carac->{$gene_id};
	    my $hash_ensembl = &FonctionsXls::get_gene_identifiants_ensembl($gene_infos->{"ensembl"}, $h_genes_ortholgues_humain, $h_genes_ortholgues_souris);
            my $strand = ($gene_infos->{"strand"} eq '1') ? '+' : '-';
	    my @data_gene    = ($gene_id, $gene_infos->{"symbol"}, $gene_infos->{"desc"}, $hash_ensembl->{"ensembl_humain"}, $hash_ensembl->{"ensembl_souris"}, "chr" . $gene_infos->{"chr"}.":".$gene_infos->{"start"}."-".$gene_infos->{"end"}.":".$strand);
            
            
        # Traitement entité par entité
        while(my ($entite_id, $hash_ba) = each %$hash_entites){

    	    # On récupère les infos de l'entité courante
    	    my @split          = split(/-/, $entite_id);

            my $h_carac_entite = &FonctionsXls::requete_entite_caracteristiques_xls($probes_db, $table_entites, $split[1], $split[0]);
            my @data_entite    = ($h_carac_entite->{"nom_type"}, $h_carac_entite->{"position"}, $gene_id."_".$h_carac_entite->{"position"}, $h_carac_entite->{"sequence"});
            
            # On ne traite l'entité que si elle n'est pas égale à l'exon
            if( $h_carac_entite->{"num_type"} == 1 || ( $h_carac_entite->{"num_type"} != 1 && $h_carac_entite->{"is_exon"} != 1 ) ){
    	    

                # B/A
                
                $hash_ba->{"link"}     = ''; #"http://172.21.100.5/elexir/main.pl?id=$gene_id&experiment=$projet_num_simple_ab".$orga."&dabg=on&entity=exon&color=absolute&gc_content=on&probe=reverse&repeat=on&bio_mol=cDNA_Only&id_ortholog=unknown";
                my ($reg_ba, $si_ba)   = &FonctionsXls::get_regulation_fold_for_xls_from_log2_to_base10($hash_ba->{"si"});
                if ($reg_ba eq "down"){ $si_ba = -$si_ba; }
                $hash_ba->{"reg"}      = $reg_ba;
                $hash_ba->{"si"}       = $si_ba;
                my @data_ba            = ($hash_ba->{"link"}, $hash_ba->{"reg"}, $hash_ba->{"si"}, $hash_ba->{"pval"}, $hash_ba->{"est_fiable"}, $hash_ba->{"nb_sondes"});
            
            
                # D/C
                
                my @data_dc = ();
                if ( $hash_dc->{$gene_id}->{$entite_id}->{"si"} ){
                    $hash_dc->{$gene_id}->{$entite_id}->{"link"} = ''; #"http://172.21.100.5/elexir/main.pl?id=$gene_id&experiment=$projet_num_simple_cd".    $orga."&dabg=on&entity=exon&color=absolute&gc_content=on&probe=reverse&repeat=on&bio_mol=cDNA_Only&id_ortholog=unknown";
                    my ($reg_dc, $si_dc)                         = &FonctionsXls::get_regulation_fold_for_xls_from_log2_to_base10($hash_dc->{$gene_id}->{$entite_id}->{"si"});
                    if ($reg_dc eq "down"){               $si_dc = -$si_dc; }
                    $hash_dc->{$gene_id}->{$entite_id}->{"si"}   = $si_dc;
                    $hash_dc->{$gene_id}->{$entite_id}->{"reg"}  = $reg_dc;
                    @data_dc = ($hash_dc->{$gene_id}->{$entite_id}->{"link"}, $hash_dc->{$gene_id}->{$entite_id}->{"reg"}, $hash_dc->{$gene_id}->{$entite_id}->{"si"}, $hash_dc->{$gene_id}->{$entite_id}->{"pval"}, $hash_dc->{$gene_id}->{$entite_id}->{"est_fiable"}, $hash_dc->{$gene_id}->{$entite_id}->{"nb_sondes"});
                }else{
                    @data_dc = ("-", "-", "-", "-", "-", "-");
                }
            
            
                # J/O
            
                my @data_jo = ();
                if( $hash_jo->{$gene_id}->{$entite_id}->{"si"} ){
                    
                    # On ne peut interpréter J/O que si B/A et D/C ont été calculés
                    if( $data_dc[0] ne "-" ){
            
                        my ($reg_jo, $si_jo) = &FonctionsXls::get_regulation_fold_for_xls_from_log2_to_base10($hash_jo->{$gene_id}->{$entite_id}->{"si"});
                
                        # On détermine l'effet de la déplétion
                    
                        # B/A est une inclusion
                        if ( $type_event_ba eq "inclusion" ){

                            # D/C est une exclusion ou une inclusion moins importante que B/A
                            if ( $hash_dc->{$gene_id}->{$entite_id}->{"si"} < $hash_ba->{"si"} ){
                                $hash_jo->{$gene_id}->{$entite_id}->{"effet"}  = "Affaiblit";
                                $hash_jo->{$gene_id}->{$entite_id}->{"si"}     = -$si_jo;

                            # D/C est une inclusion plus importante
                            }elsif( $hash_dc->{$gene_id}->{$entite_id}->{"si"} >= $hash_ba->{"si"} ){
                                $hash_jo->{$gene_id}->{$entite_id}->{"effet"}  = "Renforce";
                                $hash_jo->{$gene_id}->{$entite_id}->{"si"}     = $si_jo;
                            }

                        # B/A est une exclusion
                        }elsif( $type_event_ba eq "exclusion" ){

                            # D/C est une exclusion moins importante
                            if ( $hash_dc->{$gene_id}->{$entite_id}->{"si"} < $hash_ba->{"si"} ){
                                $hash_jo->{$gene_id}->{$entite_id}->{"effet"}  = "Renforce";
                                $hash_jo->{$gene_id}->{$entite_id}->{"si"}     = $si_jo;

                            # D/C est une inclusion ou une exlusion moins importante que B/A
                            }elsif( $hash_dc->{$gene_id}->{$entite_id}->{"si"} >= $hash_ba->{"si"} ){
                                $hash_jo->{$gene_id}->{$entite_id}->{"effet"}  = "Affaiblit";
                                $hash_jo->{$gene_id}->{$entite_id}->{"si"}     = -$si_jo;
                            }

                        }
                        # On ajoute la catégorie "ça fait rien"
                        if ( abs($hash_jo->{$gene_id}->{$entite_id}->{"si"}) < $seuil_epissage_j_vs_o ) {
                            $hash_jo->{$gene_id}->{$entite_id}->{"effet"}  = "Peu d'effet";
                        }
                
                        @data_jo = ($hash_jo->{$gene_id}->{$entite_id}->{"effet"}, $hash_jo->{$gene_id}->{$entite_id}->{"si"}, $hash_jo->{$gene_id}->{$entite_id}->{"pval"}, $hash_jo->{$gene_id}->{$entite_id}->{"est_fiable"}, $hash_jo->{$gene_id}->{$entite_id}->{"nb_sondes"});
                    
                    # Pas de D/C -> pas d'interprétation de J/O
                    }else{
                        @data_jo = ("-", "-", "-", "-", "-");
                    }

                }else{
                    @data_jo = ("-", "-", "-", "-", "-");
                }
            
            
                # Ecriture
                my @data = (@data_gene, @data_entite, @data_ba, @data_dc, @data_jo);
                if ( $data_jo[0] ne "-" ) {
                    if ( $hash_jo->{$gene_id}->{$entite_id}->{"pval"} > $seuil_pval || $hash_jo->{$gene_id}->{$entite_id}->{"est_fiable"} == 0 || $hash_jo->{$gene_id}->{$entite_id}->{"effet"} eq "Peu d'effet" ) {
                        &FonctionsXls::ecriture(\@data, $feuille, $num_ligne, $format_cell_mauv);
                    }else{
                        &FonctionsXls::ecriture(\@data, $feuille, $num_ligne, $format_resume_cell);
                    }
                }else{
                    &FonctionsXls::ecriture(\@data, $feuille, $num_ligne, $format_cell_mauv);
                }
                
                # On incrémente le nb d'entités traitées
                $num_ligne++;
        
            
            }
            
            
        }

    }
    
}
# ------------------------------------------------------------------ #



















