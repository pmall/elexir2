#!/usr/bin/perl
use strict;
use warnings;
use YAML::XS qw(LoadFile);
use DBI;
use List::MoreUtils qw(uniq);
use FindBin qw($Bin);
use lib $FindBin::Bin . '/../lib';
use Format;
use Math;
use Utils;
use Stats;
use Analyse;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Parametres pour l'analyse
my $gc_max = $config->{'compose'}{'gc_max'};
my $nb_occ_max = $config->{'compose'}{'nb_occ_max'};
my $seuil_dabg = $config->{'compose'}{'seuil_dabg'};
my $nb_sondes_min_entite = $config->{'compose'}{'nb_sondes_min_entite'};
my $seuil_si_robust = $config->{'compose'}{'seuil_si_robust'};

# ==============================================================================
# Préparation des requètes pour les infos du projet
# ==============================================================================

# On se connecte a elexir
my $dbh = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

# On récupère les infos de l'analyse
my $analyse = Analyse->get_analyse($dbh, $id_analyse);

# Message d'erreur si l'analyse n'existe pas
die('L\'id de l\'analyse n\'est pas valide.') if(!$analyse);

# Message d'erreur si c'est pas le bon script pour le bon type d'analyse
if($analyse->{'type'} ne 'compose'){

	die('Le script composé ne fonctionne que sur les analyses composées :o)');

}

# ==============================================================================
# On crée les noms de table dont on a besoin
# ==============================================================================

my $id_projet = $analyse->{'id_project'};
my $type_chips = $analyse->{'type_chips'};
my $version = $analyse->{'version'};
my $orga = $analyse->{'organism'};
my $paire = $analyse->{'paired'};

my $table_entites = $config->{'table_entites'}{$version}{$orga};
my $table_sondes = $config->{'table_sondes'}{$type_chips}{$version}{$orga};
my $table_dabg = get_table_dabg($id_projet);
my $table_intensites = get_table_intensites($id_projet);
my $table_trans = get_table_transcription($id_projet, $id_analyse);
my $table_si = get_table_si($id_projet, $id_analyse);
my $table_splicing = get_table_splicing($id_projet, $id_analyse);

# ==============================================================================
# On prépare les requete sur elexir pour l'analyse avec ces infos
# ==============================================================================

# On selectionne les gènes qui ont un fc épissage
my $select_genes_sth = $dbh->prepare(
	"SELECT * FROM " . $table_trans
);

# On selectionne les entités codantes d'un gène
my $select_entites_sth = $dbh->prepare(
	"SELECT id, type, exon_pos FROM " . $table_entites . "
	WHERE id_gene = ? AND type != 'intron'"
);

# On selectionne les sondes d'un gène
my $select_infos_sondes_sth = $dbh->prepare(
	"SELECT probe_id, nb_occ, gc_content, exon_pos, entite_id, entite_type
	FROM " . $table_sondes . "
	WHERE entite_id = ?
	AND utiliser_dans_analyse = 1"
);

# On selectionne le dabg d'une sonde
my $select_dabg_sth = $dbh->prepare(
	"SELECT * FROM " . $table_dabg . " WHERE probe_id = ?"
);

# On selectionne l'intensité d'une sonde
my $select_intensite_sth = $dbh->prepare(
	"SELECT * FROM " . $table_intensites . " WHERE probe_id = ?"
);

# ==============================================================================
# On crée dynamiquement la table
# ==============================================================================

my @fields_splicing = ();

push(@fields_splicing, 'id_entite INT UNSIGNED NOT NULL PRIMARY KEY');
push(@fields_splicing, 'id_gene INT UNSIGNED NOT NULL');
push(@fields_splicing, 'type_entite ENUM(\'exon\',\'prom\',\'polya\',\'donor\',\'acceptor\',\'deletion\',\'intron-retention\',\'intron\') NOT NULL');
push(@fields_splicing, 'exon_pos SMALLINT UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_ba DECIMAL(10,5) UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_dc DECIMAL(10,5) UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_oj DECIMAL(10,5) UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_pval_ba DECIMAL(12,10) UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_pval_dc DECIMAL(12,10) UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_pval_oj DECIMAL(12,10) UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_adjp_ba DECIMAL(12,10) UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_adjp_dc DECIMAL(12,10) UNSIGNED NOT NULL');
push(@fields_splicing, 'SI_adjp_oj DECIMAL(12,10) UNSIGNED NOT NULL');
push(@fields_splicing, 'nb_sondes_ba SMALLINT UNSIGNED NOT NULL');
push(@fields_splicing, 'nb_sondes_dc SMALLINT UNSIGNED NOT NULL');
push(@fields_splicing, 'nb_sondes_oj SMALLINT UNSIGNED NOT NULL');
push(@fields_splicing, 'is_robust_ba TINYINT UNSIGNED NOT NULL');
push(@fields_splicing, 'is_robust_dc TINYINT UNSIGNED NOT NULL');
push(@fields_splicing, 'is_robust_oj TINYINT UNSIGNED NOT NULL');

$dbh->do('DROP TABLE IF EXISTS ' . $table_splicing);
$dbh->do('CREATE TABLE ' . $table_splicing . ' (' . join(', ', @fields_splicing) . ')');

my $insert_entite_sth = $dbh->prepare(
	"INSERT INTO $table_splicing VALUES(" . join(', ', ('?')x@fields_splicing) . ")"
);

# ==============================================================================
# Début de l'algo, on analyse les gènes avec un fc épissage
# ==============================================================================

print 'Analyse des entités' . "\n";

# Deux racourcis
my $analyse_ba = $analyse->{'design'}->[0]->{'cont'};
my $analyse_dc = $analyse->{'design'}->[0]->{'test'};

# On défini une liste d'entité
my @entites = ();

# On selectionne les gènes
$select_genes_sth->execute;

# Pour chaque gène
while(my $gene = $select_genes_sth->fetchrow_hashref){

	# ======================================================================
	# On calcule les entités du gène
	# ======================================================================

	# On selectionne les entités du gène
	$select_entites_sth->execute($gene->{'id_gene'});

	# Pour chaque entité du gène
	while(my $entite = $select_entites_sth->fetchrow_hashref){

		print $gene->{'id_gene'} . ' ' . $entite->{'id'} . "\n";

		# ==============================================================
		# On selectionne les sondes
		# ==============================================================

		# On récupère les infos des sondes de l'entité
		$select_infos_sondes_sth->execute($entite->{'id'});
		my $infos_sondes = $select_infos_sondes_sth->fetchall_hashref('probe_id');
		$select_infos_sondes_sth->finish;

		# Si on a pas 3 sondes on zappe
		next if(scalar(keys %{$infos_sondes}) < $nb_sondes_min_entite);

		# On vire les sondes qui ont pas les bonnes caractéristiques
		my $ids_sondes_ok = [grep {
			# ON VIRE LES SONDES AVEC UN GC <= 2 PARCE QU'ON A PAS PU
			# CALCULER LEUR DABG AVEC APT :((
			$infos_sondes->{$_}->{'gc_content'} > 2
			and
			$infos_sondes->{$_}->{'nb_occ'} <= $nb_occ_max
			and
			$infos_sondes->{$_}->{'gc_content'} <= $gc_max
		} keys %{$infos_sondes}];

		# Si on a pas 3 sondes on zappe
		next if(@{$ids_sondes_ok} < $nb_sondes_min_entite);

		# On récupère les SIs des sondes exprimés
		my @sondes_ba = ();
		my @sondes_dc = ();
		my @sondes_oj = ();

		# Pour chaque id de sonde
		foreach my $id_sonde (@{$ids_sondes_ok}){

			# On récupère les valeurs de dabg de la sonde
			$select_dabg_sth->execute($id_sonde);
			my $dabg = $select_dabg_sth->fetchrow_hashref;
			$select_dabg_sth->finish;

			# On calcule le dabg de ab
			my $dabg_ba = $analyse_ba->dabg($dabg, $seuil_dabg);

			# On calcule le dabg de cd
			my $dabg_dc = $analyse_dc->dabg($dabg, $seuil_dabg);

			# Si la sonde est exprimé
			if($dabg_ba || $dabg_dc){

				# On va chercher ses intensites
				$select_intensite_sth->execute($id_sonde);
				my $sonde = $select_intensite_sth->fetchrow_hashref;
				$select_intensite_sth->finish;

				# Et on les ajoute à la liste des SIs
				push(@sondes_ba, $sonde) if($dabg_ba);
				push(@sondes_dc, $sonde) if($dabg_dc);
				push(@sondes_oj, $sonde) if($dabg_ba && $dabg_dc);

			}

		}

		# Si il n'y a pas trois sondes exprimées on zappe
		next if(@sondes_ba < $nb_sondes_min_entite);
		next if(@sondes_dc < $nb_sondes_min_entite);
		next if(@sondes_oj < $nb_sondes_min_entite);

		# ==============================================================
		# On calcule les SIs des sondes
		# ==============================================================

		# Comparaison B/A
		my @SIs_sondes_ba = $analyse_ba->sis_sondes(
			$gene->{'fc_ba'},
			\@sondes_ba
		);

		# Comparaison D/C
		my @SIs_sondes_dc = $analyse_dc->sis_sondes(
			$gene->{'fc_dc'},
			\@sondes_dc
		);

		# Comparaison O/J
		my @SIs_sondes_oj = $analyse->sis_sondes(
			$gene->{'fc_oj'},
			\@sondes_oj
		);

		# ==============================================================
		# On calcule le SI de l'entité
		# ==============================================================

		# Comparaison B/A
		my($SI_ba, $p_value_ba) = si_matrix(\@SIs_sondes_ba, $paire);

		# Comparaison D/C
		my($SI_dc, $p_value_dc) = si_matrix(\@SIs_sondes_dc, $paire);


		# Comparaison O/J
		my($SI_oj, $p_value_oj) = si_matrix(\@SIs_sondes_oj, $paire);

		# ==============================================================
		# On calcule si l'entité est "cohérente"
		# ==============================================================

		my $is_robust_ba = is_robust(
			[map { median(@{$_}) } @SIs_sondes_ba],
			$seuil_si_robust,
			(1/$seuil_si_robust)
		);

		my $is_robust_dc = is_robust(
			[map { median(@{$_}) } @SIs_sondes_dc],
			$seuil_si_robust,
			(1/$seuil_si_robust)
		);

		my $is_robust_oj = is_robust(
			[map { median(@{$_}) } @SIs_sondes_oj],
			$seuil_si_robust,
			(1/$seuil_si_robust)
		);

		# ==============================================================
		# On ajoute l'entité à la liste des entites
		# ==============================================================

		push(@entites, {
			'id_entite' => $entite->{'id'},
			'id_gene' => $gene->{'id_gene'},
			'type_entite' => $entite->{'type'},
			'exon_pos' => $entite->{'exon_pos'},
			'SI_ba' => $SI_ba,
			'SI_dc' => $SI_dc,
			'SI_oj' => $SI_oj,
			'SI_pval_ba' => $p_value_ba,
			'SI_pval_dc' => $p_value_dc,
			'SI_pval_oj' => $p_value_oj,
			'nb_sondes_ba' => scalar(@sondes_ba),
			'nb_sondes_dc' => scalar(@sondes_dc),
			'nb_sondes_oj' => scalar(@sondes_oj),
			'is_robust_ba' => $is_robust_ba,
			'is_robust_dc' => $is_robust_dc,
			'is_robust_oj' => $is_robust_oj,
		});

	}

	# On termine la requète pour les entités
	$select_entites_sth->finish;

}

# On calcule les pvalues ajustées
my @SI_adjp_ba = adjust_pvals(map { $_->{'SI_pval_ba'} } @entites);
my @SI_adjp_dc = adjust_pvals(map { $_->{'SI_pval_dc'} } @entites);
my @SI_adjp_oj = adjust_pvals(map { $_->{'SI_pval_oj'} } @entites);

# On ajoute les entités
for(my $i = 0; $i < @entites; $i++){

	my @values = ();

	push(@values, $entites[$i]->{'id_entite'});
	push(@values, $entites[$i]->{'id_gene'});
	push(@values, $entites[$i]->{'type_entite'});
	push(@values, $entites[$i]->{'exon_pos'});
	push(@values, $entites[$i]->{'SI_ba'});
	push(@values, $entites[$i]->{'SI_dc'});
	push(@values, $entites[$i]->{'SI_oj'});
	push(@values, $entites[$i]->{'SI_pval_ba'});
	push(@values, $entites[$i]->{'SI_pval_dc'});
	push(@values, $entites[$i]->{'SI_pval_oj'});
	push(@values, $SI_adjp_ba[$i]);
	push(@values, $SI_adjp_dc[$i]);
	push(@values, $SI_adjp_oj[$i]);
	push(@values, $entites[$i]->{'nb_sondes_ba'});
	push(@values, $entites[$i]->{'nb_sondes_dc'});
	push(@values, $entites[$i]->{'nb_sondes_oj'});
	push(@values, $entites[$i]->{'is_robust_ba'});
	push(@values, $entites[$i]->{'is_robust_dc'});
	push(@values, $entites[$i]->{'is_robust_oj'});

	$insert_entite_sth->execute(@values);

}
