#!/usr/bin/perl
use warnings;
use strict;
use YAML::XS qw(LoadFile);
use DBI;
use File::Path qw(make_path);
use Spreadsheet::WriteExcel;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../lib";
use Format;
use Math qw(round);
use Analyse::RequetesCourantes;
use Traitement_resultats::FonctionsXls;

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On récupère un hash de config
my $config = LoadFile($FindBin::Bin . '/../config.yml');

# passe est 3'_utr aussi en principe
my $est_3primeUTR = 0;

# On défini les identifiants pour la bdd
my $db_host = $config->{'db_host'};
my $db_user = $config->{'db_user'};
my $db_pass = $config->{'db_pass'};
my $db_name = $config->{'db_name'};

# Paramètres de sélection pour les résulats
my $seuil_epissage = $config->{'excel'}{'seuil_epissage'};
my $seuil_pval = $config->{'excel'}{'seuil_pval'};
my $seuil_fiabilite_fcGene = $config->{'excel'}{'seuil_fc_gene'};

# Répertoire de sortie 
my $dir_xls = $config->{'dir_xls'};

# ==============================================================================
# Connection à elexir et préparation des requetes
# ==============================================================================

my $probes_db = DBI->connect(
	"DBI:mysql:" . $db_name . ":" . $db_host,
	$db_user,
	$db_pass
);

# On selectionne les infos de l'analyse
my $select_infos_analyse_sth = $probes_db->prepare(
	"SELECT p.id AS id_project, p.organism, a.name, a.type,
	COUNT(DISTINCT ca.name) AS nb_rep_cont, COUNT(DISTINCT cb.name) AS nb_rep_test
	FROM analyses AS a, projects AS p, groups AS la, groups AS lb, chips AS ca, chips AS cb
	WHERE a.id_project = p.id
	AND a.id = la.id_analysis
	AND a.id = lb.id_analysis
	AND la.letter = 'A'
	AND lb.letter = 'B'
	AND p.id = ca.id_project
	AND p.id = cb.id_project
	AND la.`condition` = ca.`condition`
	AND lb.`condition` = cb.`condition`
	AND a.id = ?
	GROUP BY p.id"
);

# ==============================================================================
# On récupère les infos de l'analyse
# ==============================================================================

$select_infos_analyse_sth->execute($id_analyse);

my $infos_analyse = $select_infos_analyse_sth->fetchrow_hashref;

die('L\'id de l\'analyse n\'est pas valide.') if(!$infos_analyse);

# ==============================================================================
# On récupère les infos dont on a besoin selon les infos de l'analyse
# ==============================================================================

my $id_projet = $infos_analyse->{"id_project"};
my $orga = $infos_analyse->{"organism"};
my $est_paire = ($infos_analyse->{"type"} eq 'paire');
my $nb_repl_cont = $infos_analyse->{"nb_rep_cont"};
my $nb_repl_test = $infos_analyse->{"nb_rep_test"};
my $name = $infos_analyse->{'name'};

# on crée les variables du script qui déendent de l'analyse
my $orga_adaptor = get_organism_adaptor($orga);
my $base_fasterdb = $config->{'db_name_fasterdb'}{$orga};
my $table_trans = get_table_transcription($id_projet, $id_analyse);
my $table_splicing = get_table_splicing($id_projet, $id_analyse);
my $table_sondes = $config->{'table_sondes'}{$orga};
my $table_carac_entites = $config->{'table_carac_entites'}{$orga};
my $dir_sortie = $dir_xls . '/' . $id_projet . '/' . $id_analyse;
my $fichier_sortie = $dir_sortie . '/' . $name . '_epissage.xls';

# On crée les dossier
make_path($dir_sortie);

# ==============================================================================
# On se connecte a fasterdb
# ==============================================================================

my $faster_db = DBI->connect(
	"DBI:mysql:" . $base_fasterdb . ":" . $db_host,
	$db_user,
	$db_pass
);

# ==============================================================================
# On initialise le fichier
# ==============================================================================

# Fichier
my $resultat			= Spreadsheet::WriteExcel->new($fichier_sortie);

# Feuilles
my $f_resume			= $resultat->add_worksheet('Parametres et entites analysees');
my $f_epissage_no_fdr		= $resultat->add_worksheet('NO FDR');
my $f_epissage_fdr		= $resultat->add_worksheet('FDR');

# Couleurs
my $couleur_entete		= $resultat->set_custom_color(39, 189, 189, 189);

# Formats
my $format_resume_titre		= $resultat->add_format(color => 'black', bold => 1, center_across => 1);
my $format_resume_intermediaire	= $resultat->add_format(color => 'black', italic => 1, center_across => 1);
my $format_resume_cell		= $resultat->add_format(color => 'black', bold => 0, center_across => 1);
my $format_merge_entete		= $resultat->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_entete		= $resultat->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_cell			= $resultat->add_format(color => 'black', border => 1, border_color => 'black', center_across => 1);
my $format_cell_mauv_fc		= $resultat->add_format(color => 'red', border => 1, border_color => 'black', center_across => 1);
my $format_cell_no_center	= $resultat->add_format(color => 'black', bold => 0);


#-------------------------------------------------------------------#
#                          Données à afficher                       #
#-------------------------------------------------------------------#

# On set la largeur des colonnes
setting_columns($f_epissage_no_fdr);
setting_columns($f_epissage_fdr);

# Colonnes d'en-tête mergées
merging_columns($f_epissage_no_fdr);
merging_columns($f_epissage_fdr);

# Données à afficher
my @regulation_si     = ('Regulation');
my @regulation_si_sd  = ('Regulation');
my @regulation_psi    = ('Regulation');

if( $est_paire ) {
    for ( my $i = 0 ; $i < $nb_repl_cont ; $i++ ){
        push(@regulation_si, 'SI'.($i+1));
        push(@regulation_si_sd, 'SI'.($i+1));
    }
    push(@regulation_si, 'Med SI', 'Pvalue', 'SI/FCgene');
    push(@regulation_si_sd, 'Med SIsd', 'Pvalue', 'SIsd/FCgene');
    push(@regulation_psi, 'Med Psi Control', 'sd Med Psi Control', 'Med Psi Test', 'sd Med Psi Test', 'Med Psi FC', 'sd Med Psi FC', 'Pvalue', 'psiFC/FCgene');
}else{
    push(@regulation_si, 'SI', 'Pvalue', 'SI/FCgene');
    push(@regulation_si_sd, 'SIsd', 'SIsd/FCgene');
    push(@regulation_psi, 'Psi Control', 'Psi Test', 'Psi FC', 'psiFC/FCgene');
}

# En-tetes des onglets
my @entete_epissage = ('Gene', 'SI', 'SIsd', 'Psi', 'Fasterdb id', 'Link Misea', 'Symbol', 'Name', 'Human Ensembl id', 'Mouse Ensembl id', 'Chr Position', 'Regulation', 'FC', 'Pvalue', 'AS Event Type', 'Exon position', 'Nb probes analysed', 'AS Event Sequence', @regulation_si, @regulation_si_sd, @regulation_psi, '% CB probes in entity');

# Ecriture
&FonctionsXls::ecriture(\@entete_epissage, $f_epissage_no_fdr, 1, $format_entete);
&FonctionsXls::ecriture(\@entete_epissage, $f_epissage_fdr, 1, $format_entete);

#-------------------------------------------------------------------#
#                              Traitement                           #
#-------------------------------------------------------------------#


# ---------------------------- Resume ----------------------------- #

# Date
$f_resume->write(0, 0, date(), $format_cell_no_center);

# Paramètres utilisés
$f_resume->write(2, 0, "Parametres utilises", $format_resume_titre);
my @parametre_si      = ("Seuil SI", $seuil_epissage);
my @parametre_pval    = ("Seuil p-value", $seuil_pval);
my @parametre_fc_gene = ("Seuil fc gene", $seuil_fiabilite_fcGene);
my @explication_fc_gene = ("Les entites des genes dont le fc est > 2 sont colores en rouge (evenements moins fiables).");
&FonctionsXls::ecriture(\@parametre_si, $f_resume, 3, $format_resume_cell);
&FonctionsXls::ecriture(\@parametre_pval, $f_resume, 4, $format_resume_cell);
&FonctionsXls::ecriture(\@parametre_fc_gene, $f_resume, 5, $format_resume_cell);
&FonctionsXls::ecriture(\@explication_fc_gene, $f_resume, 5, $format_cell_no_center, 2);

# Annotation des sondes et des gènes analysés
#&FonctionsXls::resume_annotation_sondes($probes_db, $orga, $projet_num, $f_resume, $format_resume_titre, $format_resume_cell, $format_cell_no_center, "splicing");
if($est_3primeUTR){
    #&FonctionsXls::resume_annotation_3primeUTR($probes_db, $orga, $projet_num, $f_resume, $format_resume_titre, $format_resume_cell, $format_cell_no_center);
}else{
    #&FonctionsXls::resume_annotation_entites($probes_db, $orga, $projet_num, $f_resume, $format_resume_titre, $format_resume_cell, $format_cell_no_center);
}

# ------------------------- Récup infos --------------------------- #

# Caractéristiques des gènes
my $h_genes_carac = &RequetesCourantes::requete_genes_caracteristiques($faster_db);

# Gènes orthologues
my ($h_genes_ortholgues_humain, $h_genes_ortholgues_souris) = &RequetesCourantes::requete_genes_orthologues($faster_db);

# Régulation des gènes
my $h_genes_regulation_no_fdr = &FonctionsXls::requete_genes_regulation_xls($probes_db, $table_trans, $est_paire, 0);
my $h_genes_regulation_fdr    = &FonctionsXls::requete_genes_regulation_xls($probes_db, $table_trans, $est_paire, 1);


# -------------------------- Requete ---------------------------- #

my @select_rep_si = ();
my @select_rep_si_sd = ();
if ( $est_paire ) {
    for ( my $i = 1 ; $i <= $nb_repl_cont ; $i++ ){
        push(@select_rep_si, "SI$i");
        push(@select_rep_si_sd, "SIsd$i");
    }
}

my $requete;

if ( $est_paire ) {

    if ( $est_3primeUTR ){
        $requete =
            "SELECT id_entite, entite_type, gene_id, ".join(', ', @select_rep_si).", SI, SI_pval, SI_adjp, ".join(', ', @select_rep_si_sd).", SIsd, SIsd_pval, SIsd_adjp, psi_control, psi_sd_control, psi_test, psi_sd_test, psi_fc, psi_sd_fc, psi_pval, psi_adjp, nb_sondes
            FROM $table_splicing
            WHERE entite_type = 8 AND is_robust = 1";
    }else{
        $requete =
            "SELECT id_entite, entite_type, gene_id, ".join(', ', @select_rep_si).", SI, SI_pval, SI_adjp, ".join(', ', @select_rep_si_sd).", SIsd, SIsd_pval, SIsd_adjp, psi_control, psi_sd_control, psi_test, psi_sd_test, psi_fc, psi_sd_fc, psi_pval, psi_adjp, nb_sondes
            FROM $table_splicing
            WHERE entite_type != 8 AND is_robust = 1";
    }

}else{

    if ( $est_3primeUTR ){
        $requete =
            "SELECT id_entite, entite_type, gene_id, SI, SI_pval, SI_adjp, SIsd, psi_control, psi_test, psi_fc, nb_sondes
            FROM $table_splicing
            WHERE entite_type = 8 AND is_robust = 1";
    }else{
        $requete =
            "SELECT id_entite, entite_type, gene_id, SI, SI_pval, SI_adjp, SIsd, psi_control, psi_test, psi_fc, nb_sondes
            FROM $table_splicing
            WHERE entite_type != 8 AND is_robust = 1";
    }

}

# ------------------- Exécution de la requete --------------------- #

my ($h_no_fdr) = requetage($h_genes_regulation_no_fdr, 0);
my ($h_fdr)    = requetage($h_genes_regulation_fdr, 1);


# ------------------- Traitement des résultats --------------------- #

# Pas de correction de la FDR
my $is_fdr    = 0;
my $num_ligne = 2;
my $num_gene  = 0;

my $h_resultats_no_fdr_bon_fc  = ();
my $h_resultats_no_fdr_mauv_fc = ();
my $h_no_fdr_genes_totaux      = ();
my $is_bon_fc_gene = 1;
($num_ligne, $num_gene) = process($num_ligne, $num_gene, $h_no_fdr->{"communs_bon_fc"}, $h_genes_regulation_no_fdr, $is_bon_fc_gene, $is_fdr, $f_epissage_no_fdr);
$is_bon_fc_gene = 0;
($num_ligne, $num_gene) = process($num_ligne, $num_gene, $h_no_fdr->{"communs_mauv_fc"}, $h_genes_regulation_no_fdr, $is_bon_fc_gene, $is_fdr, $f_epissage_no_fdr);
$is_bon_fc_gene = 1;
($num_ligne, $num_gene) = process($num_ligne, $num_gene, $h_no_fdr->{"non_communs_bon_fc"}, $h_genes_regulation_no_fdr, $is_bon_fc_gene, $is_fdr, $f_epissage_no_fdr);
$is_bon_fc_gene = 0;
($num_ligne, $num_gene) = process($num_ligne, $num_gene, $h_no_fdr->{"non_communs_mauv_fc"}, $h_genes_regulation_no_fdr, $is_bon_fc_gene, $is_fdr, $f_epissage_no_fdr);

# Avec correction de la FDR
$is_fdr    = 1;
$num_ligne = 2;
$num_gene  = 0;

my $h_resultats_fdr_bon_fc  = ();
my $h_resultats_fdr_mauv_fc = ();
my $h_fdr_genes_totaux      = ();
$is_bon_fc_gene = 1;
($num_ligne, $num_gene) = process($num_ligne, $num_gene, $h_fdr->{"communs_bon_fc"}, $h_genes_regulation_fdr, $is_bon_fc_gene, $is_fdr, $f_epissage_fdr);
$is_bon_fc_gene = 0;
($num_ligne, $num_gene) = process($num_ligne, $num_gene, $h_fdr->{"communs_mauv_fc"}, $h_genes_regulation_fdr, $is_bon_fc_gene, $is_fdr, $f_epissage_fdr);
$is_bon_fc_gene = 1;
($num_ligne, $num_gene) = process($num_ligne, $num_gene, $h_fdr->{"non_communs_bon_fc"}, $h_genes_regulation_fdr, $is_bon_fc_gene, $is_fdr, $f_epissage_fdr);
$is_bon_fc_gene = 0;
($num_ligne, $num_gene) = process($num_ligne, $num_gene, $h_fdr->{"non_communs_mauv_fc"}, $h_genes_regulation_fdr, $is_bon_fc_gene, $is_fdr, $f_epissage_fdr);

# ---------------------------------------------------------------- #
#                             Subroutines                          #
# ---------------------------------------------------------------- #
sub setting_columns {
    my($feuille) = @_;

    $feuille->set_column(0, 43, 11);
    $feuille->set_column(7, 10, 22);
    $feuille->set_column(14, 17, 18);
    if( $est_paire ){
        $feuille->set_column(33, 38, 18);
        $feuille->set_column(40, 41, 20);
    }else{
        $feuille->set_column(30, 30, 20);
    }

}
# ------------------------------------------------------------------ #
sub merging_columns {
    my($feuille) = @_;
    
    # Carac entite
    $feuille->merge_range('B1:D1', 'Found regulated with algorithm', $format_merge_entete);
    $feuille->merge_range('E1:N1', 'Gene information', $format_merge_entete);
    $feuille->merge_range('O1:R1', 'AS Event information', $format_merge_entete);
    # SI
    my $cell_deb = "S1";
    my $cell_fin = "S";
    if ($est_paire){
        for ( my $i=1 ; $i <($nb_repl_cont+4) ; $i++ ){
            $cell_fin++;
        } 
    }else{
        $cell_fin = "V";
    }
    $feuille->merge_range($cell_deb.':'.$cell_fin.'1', 'SI Algorithm', $format_merge_entete);
    # SIsd
    $cell_fin++;
    $cell_deb = $cell_fin;
    if( $est_paire ){
        for ( my $i=1 ; $i <($nb_repl_cont+4) ; $i++ ){
            $cell_fin++;
        } 
    }else{
        $cell_fin = "Z";
    }
    $feuille->merge_range($cell_deb.'1:'.$cell_fin.'1', 'SIsd Algorithm', $format_merge_entete);
    # Psi
    $cell_fin++;
    $cell_deb = $cell_fin;
    if( $est_paire ){
        for ( my $i=1 ; $i < 9 ; $i++ ){
            $cell_fin++;
        } 
    }else{
        $cell_fin = "AE";
    }
    $feuille->merge_range($cell_deb.'1:'.$cell_fin.'1', 'Psi Algorithm', $format_merge_entete);

}
# ------------------------------------------------------------------ #
sub requetage {

    my ($h_gene_reg, $correction_fdr) = @_;

    my %h_communs_bon_fc_gene      = ();
    my %h_communs_mauv_fc_gene     = ();
    my %h_non_communs_bon_fc_gene  = ();
    my %h_non_communs_mauv_fc_gene = ();

    my $select_splicing = $probes_db -> prepare ( $requete );
    
    $select_splicing -> execute;
    
    while ( my @data = $select_splicing -> fetchrow_array ) {


        # Informations générales de l'entité
        my $id          = shift @data;
        my $entite_type = shift @data;
        my $entite_id   = "$entite_type-$id";
        my $gene_id     = shift @data;
        my $nb_sondes   = $data[$#data];
        my %h_carac_entites = ( "full_id"   => $entite_id,
                                "num_id"    => $id,
                                "num_type"  => $entite_type,
                                "nb_sondes" => $nb_sondes );


        # On récupère les infos des analyses dans trois hash distincts
        my %h_si   = ();
        my %h_sisd = ();
        my %h_psi  = ();
        
        if( $est_paire ){

            # ----------------- Data SI ----------------- #
            
            # Sortie requete
            my @SIs     = @data[0..($nb_repl_cont-1)];
            my $si      = $data[$nb_repl_cont];
            my $si_pval = ($correction_fdr) ? $data[$nb_repl_cont+2] : $data[$nb_repl_cont+1];
            
            # Valeurs pour xls
            my ($reg_si, $SI, $SIs) = &FonctionsXls::get_regulation_fold_from_log2_to_base10($si, \@SIs);
            
            # SI/FCgene
            my $rapport_si_gene = rapport_si_entite_fc_gene($h_gene_reg->{$gene_id}, $reg_si, $SI);

            # Hash regroupant les infos SI
            %h_si = ( "regulation" => $reg_si,
                      "si"         => $SI,
                      "SIs"        => $SIs,
                      "pval"       => $si_pval,
                      "SI/FC"      => $rapport_si_gene );

        
            # ---------------- Data SIsd ---------------- #
            
            my $index_deb = ($nb_repl_cont+3);
            if( $data[$index_deb] ) {
            
                # Sortie requete
                my @SIsds     = @data[$index_deb..($index_deb+$nb_repl_cont-1)];
                my $sisd      = $data[$index_deb+$nb_repl_cont];
                my $sisd_pval = ($correction_fdr) ? $data[$index_deb+$nb_repl_cont+2] : $data[$index_deb+$nb_repl_cont+1];

                # Valeurs pour xls
                my ($reg_sisd, $SIsd, $SIsds) = &FonctionsXls::get_regulation_fold_from_log2_to_base10($sisd, \@SIsds);

                # SI/FCgene
                my $rapport_sisd_gene = rapport_si_entite_fc_gene($h_gene_reg->{$gene_id}, $reg_sisd, $SIsd);

                # Hash regroupant les infos SIsd
                %h_sisd = ( "regulation" => $reg_sisd,
                            "si"         => $SIsd,
                            "SIs"        => $SIsds,
                            "pval"       => $sisd_pval,
                            "SI/FC"      => $rapport_sisd_gene );
            
            }
            
            
            # ---------------- Data psi ----------------- #
            
            $index_deb = ($index_deb+$nb_repl_cont+3);
            if( $data[$index_deb] ) {
            
                # Sortie requete
                my $psi_control    = $data[$index_deb];
                my $sd_psi_control = $data[$index_deb+1];
                my $psi_test       = $data[$index_deb+2];
                my $sd_psi_test    = $data[$index_deb+3];
                my $psi_fc         = $data[$index_deb+4];
                my $sd_psi_fc      = $data[$index_deb+5];
                my $psi_pval       = ($correction_fdr) ? $data[$#data-1] : $data[$#data-2];

                # Valeurs pour xls
                my ($reg_psi, $psi) = &FonctionsXls::get_regulation_fold_from_base10_to_base10($psi_fc);

                # SI/FCgene
                my $rapport_psi_gene = rapport_psi_entite_fc_gene($h_gene_reg->{$gene_id}, $reg_psi, $psi);
                
                # Hash regroupant les infos psi
                %h_psi = ( "regulation" => $reg_psi,
                           "control"    => $psi_control,
                           "sd_control" => $sd_psi_control,
                           "test"       => $psi_test,
                           "sd_test"    => $sd_psi_test,
                           "fc"         => $psi_fc,
                           "sd_fc"      => $sd_psi_fc,
                           "pval"       => $psi_pval,
                           "psi/FC"     => $rapport_psi_gene );

            }                        

        }else{
        
            # ----------------- Data SI ----------------- #

            # Sortie requete
            my $si      = $data[0];
            my $si_pval = ($correction_fdr) ? $data[2] : $data[1];

            # Valeurs pour xls
            my ($reg_si, $SI) = &FonctionsXls::get_regulation_fold_from_log2_to_base10($si);
            
            # SI/FCgene
            my $rapport_si_gene = rapport_si_entite_fc_gene($h_gene_reg->{$gene_id}, $reg_si, $SI);

            # Hash regroupant les infos SI
            %h_si = ( "regulation" => $reg_si,
                      "si"         => $SI,
                      "SIs"        => -1,
                      "pval"       => $si_pval,
                      "SI/FC"      => $rapport_si_gene );

        
            # ---------------- Data SIsd ---------------- #
            
            if( $data[3] ) {
            
                # Sortie requete
                my $sisd = $data[3];

                # Valeurs pour xls
                my ($reg_sisd, $SIsd) = &FonctionsXls::get_regulation_fold_from_log2_to_base10($sisd);

                # SI/FCgene
                my $rapport_sisd_gene = rapport_si_entite_fc_gene($h_gene_reg->{$gene_id}, $reg_sisd, $SIsd);

                # Hash regroupant les infos SIsd
                %h_sisd = ( "regulation" => $reg_sisd,
                            "si"         => $SIsd,
                            "SIs"        => -1,
                            "pval"       => -1,
                            "SI/FC"      => $rapport_sisd_gene );
            }


            # ---------------- Data psi ----------------- #
            
            if( $data[4] ) {
            
                # Sortie requete
                my $psi_control = $data[4];
                my $psi_test    = $data[5];
                my $psi_fc      = $data[6];

                # Valeurs pour xls
                my ($reg_psi, $psi) = &FonctionsXls::get_regulation_fold_from_base10_to_base10($psi_fc);

                # SI/FCgene
                my $rapport_psi_gene = rapport_psi_entite_fc_gene($h_gene_reg->{$gene_id}, $reg_psi, $psi);
                
                # Hash regroupant les infos psi
                %h_psi = ( "regulation" => $reg_psi,
                           "control"    => $psi_control,
                           "sd_control" => -1,
                           "test"       => $psi_test,
                           "sd_test"    => -1,
                           "fc"         => $psi,
                           "sd_fc"      => -1,
                           "pval"       => -1,
                           "psi/FC"     => $rapport_psi_gene );

            }

        }
        
        # On annote l'entité en fonction des analyses dans lesquelles elle est trouvé ou pas
        # si
        my $is_found_with_si   = ( $h_si{"si"} >= $seuil_epissage && $h_si{"pval"} <= $seuil_pval ) ? 1 : 0;
        my ($is_found_with_sisd, $is_found_with_psi);
        # sisd
        if($est_paire){
            if( $data[$nb_repl_cont+3] ) {
                $is_found_with_sisd = ( $h_sisd{"si"} >= $seuil_epissage && $h_sisd{"pval"} <= $seuil_pval ) ? 1 : 0;
            }else{ $is_found_with_sisd = -1; }
        }else{
            if( $data[3] ) {
                $is_found_with_sisd = ( $h_sisd{"si"} >= $seuil_epissage ) ? 1 : 0;
            }else{ $is_found_with_sisd = -1; }
        }
        # psi
        if($est_paire){
            if( $data[$nb_repl_cont+3+$nb_repl_cont+3] ) {
                $is_found_with_psi  = ( $h_psi{"fc"} >= $seuil_epissage && $h_psi{"pval"} <= $seuil_pval ) ? 1 : 0;
            }else{ $is_found_with_psi = -1; }
        }else{
            if( $data[4] ) {
                $is_found_with_psi  = ( $h_psi{"fc"} >= $seuil_epissage ) ? 1 : 0;
            }else{ $is_found_with_psi = -1; }
        }
        # fc gene
        my $is_good_gene     = ( $h_gene_reg->{$gene_id}->{"fold"} < $seuil_fiabilite_fcGene ) ? 1 : 0;
        # hash rassemblant les infos
        my %h_found_analyses = ( "si" => $is_found_with_si, "sisd" => $is_found_with_sisd, "psi" => $is_found_with_psi);
        

        # On dispache l'entité dans le hash résulat correspond
        if( $is_found_with_si == 1 && $is_found_with_sisd == 1 && $is_found_with_psi == 1 ){
            if( $is_good_gene ){
                $h_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"carac"} = \%h_carac_entites;
                $h_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"found"} = \%h_found_analyses;
                $h_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"si"}    = \%h_si;
                $h_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"sisd"}  = \%h_sisd;
                $h_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"psi"}   = \%h_psi;
            }else{
                $h_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"carac"} = \%h_carac_entites;
                $h_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"found"} = \%h_found_analyses;
                $h_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"si"}    = \%h_si;
                $h_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"sisd"}  = \%h_sisd;
                $h_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"psi"}   = \%h_psi;
            }
        }elsif( $is_found_with_si == 1 || $is_found_with_sisd == 1 || $is_found_with_psi == 1 ){
            if( $is_good_gene ){
                $h_non_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"carac"} = \%h_carac_entites;
                $h_non_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"found"} = \%h_found_analyses;
                $h_non_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"si"}    = \%h_si;
                $h_non_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"sisd"}  = \%h_sisd;
                $h_non_communs_bon_fc_gene{$gene_id}->{$entite_id}->{"psi"}   = \%h_psi;
            }else{
                $h_non_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"carac"} = \%h_carac_entites;
                $h_non_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"found"} = \%h_found_analyses;
                $h_non_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"si"}    = \%h_si;
                $h_non_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"sisd"}  = \%h_sisd;
                $h_non_communs_mauv_fc_gene{$gene_id}->{$entite_id}->{"psi"}   = \%h_psi;
            }
        }
        
           
    }

    $select_splicing -> finish;
    

    # On regroupe les hash résultats dans un seul hash final
    my %h_resultats = ( "communs_bon_fc"      => \%h_communs_bon_fc_gene,
                        "communs_mauv_fc"     => \%h_communs_mauv_fc_gene,
                        "non_communs_bon_fc"  => \%h_non_communs_bon_fc_gene,
                        "non_communs_mauv_fc" => \%h_non_communs_mauv_fc_gene );


    return \%h_resultats;

}
# ------------------------------------------------------------------ #
sub rapport_si_entite_fc_gene {

    my ($h_gene_regulation, $regulation_si, $si) = @_;

    my $gene_fold       = $h_gene_regulation->{"fold"};
    my $gene_regulation = $h_gene_regulation->{"regulation"}; 
    
    my $rapport;

    # Gènes et entité ont la même régulation
    if ( $gene_regulation eq $regulation_si ){
        $rapport = round(($si/$gene_fold), 2);
    }else{
    
        # Gène up, entite down
        if( $regulation_si eq "down" ){
            $rapport = round(((1/$si)/$gene_fold), 2);
        # Gène down, entite up
        }else{
            $rapport = round(($si/(1/$gene_fold)), 2)
        }
    
    }

    # 
    ($rapport == 0)?$rapport = 1:0;

    # Rapport négatif
    ($rapport < 1)?$rapport = round((-1/$rapport), 2):0;

    return $rapport;

}
# ------------------------------------------------------------------ #
sub rapport_psi_entite_fc_gene {

    my ($h_gene_regulation, $regulation_psi, $fc_psi) = @_;

    my $gene_fold       = $h_gene_regulation->{"fold"};
    my $gene_regulation = $h_gene_regulation->{"regulation"}; 
    
    my $rapport;

    if ( $gene_regulation eq $regulation_psi ){
        $rapport = round(($fc_psi/$gene_fold), 2);
    }else{
        $rapport = -round(($fc_psi/$gene_fold), 2);
    }

    return $rapport;

}
# ------------------------------------------------------------------ #
sub process {

    my ($num_ligne, $num_gene, $hash, $h_genes_regulation, $is_bon_fc, $is_fdr, $feuille) = @_;
    
    # Format d'écriture (si le gène a un fc correct : format normal, sinon : police rouge)
    my $format = ( $is_bon_fc ) ? $format_cell : $format_cell_mauv_fc ;
    
    my %hash_genes_total = ();
    
    while ( my ($gene_id, $h_entites) = each %$hash ){

        # Informations du gène
        my $link_elexir = '';
#       my $link_elexir  = "http://172.21.100.5/elexir/main.pl?id=$gene_id&experiment=".$projet_num.$orga."&dabg=on&entity=exon&color=absolute&gc_content=on&probe=reverse&repeat=on&bio_mol=cDNA_Only&id_ortholog=unknown";
#       my $link_elexir = "http://fasterdb.com/elexir/main.pl?id=$gene_id&experiment=".$projet_num.$orga."&dabg=on&entity=exon&color=absolute&gc_content=on&probe=reverse&repeat=on&bio_mol=cDNA_Only&id_ortholog=unknown";
        my $gene_infos   = $h_genes_carac->{$gene_id};
        my $ensembl      = $gene_infos->{"ensembl"};
        my $strand       = ($gene_infos->{"strand"} eq '1') ? '+' : '-';
        my $hash_ensembl = &FonctionsXls::get_gene_identifiants_ensembl($ensembl, $h_genes_ortholgues_humain, $h_genes_ortholgues_souris);
        my @data_gene    = ($gene_id, $link_elexir, $gene_infos->{"symbol"}, $gene_infos->{"desc"}, $hash_ensembl->{"ensembl_humain"}, $hash_ensembl->{"ensembl_souris"}, 'chr' . $gene_infos->{"chr"}.":".$gene_infos->{"start"}."-".$gene_infos->{"end"}.":".$strand, $h_genes_regulation->{$gene_id}->{"regulation"}, round($h_genes_regulation->{$gene_id}->{"fold"}, 2), round($h_genes_regulation->{$gene_id}->{"pvalue"}, 5));
        

        while( my ($entite_id, $h_data) = each %$h_entites ){

            # Informations de l'entité
            my $h_carac_entite = &FonctionsXls::requete_entite_caracteristiques_xls($probes_db, $table_carac_entites, $h_data->{"carac"}->{"num_id"}, $h_data->{"carac"}->{"num_type"});
            my @data_entite = ($h_carac_entite->{"nom_type"}, $h_carac_entite->{"position"}, $h_data->{"carac"}->{"nb_sondes"}, $h_carac_entite->{"sequence"});
            
    
            # Si l'entité traitée n'est pas un exon : on ne la traite que si elle n'est pas égale à l'exon
            if( $h_carac_entite->{"num_type"} == 1 || ( $h_carac_entite->{"num_type"} != 1 && $h_carac_entite->{"is_exon"} != 1 ) ){
            
                # On comptabilise
                if( !($hash_genes_total{$gene_id}) ){ $num_gene++; }
                $hash_genes_total{$gene_id}++;
                comptabilisation_resultats($is_fdr, $is_bon_fc, $gene_id, $h_data);
                
                # Infos SI
                my @data_si  = ();
                if($est_paire){
                    foreach(@{$h_data->{"si"}->{"SIs"}}){ $_ = round($_, 2); }
                	@data_si = ($h_data->{"si"}->{"regulation"}, @{$h_data->{"si"}->{"SIs"}}, round($h_data->{"si"}->{"si"}, 2), round($h_data->{"si"}->{"pval"}, 5), $h_data->{"si"}->{"SI/FC"});
                }else{
                    @data_si = ($h_data->{"si"}->{"regulation"}, round($h_data->{"si"}->{"si"}, 2), round($h_data->{"si"}->{"pval"}, 5), $h_data->{"si"}->{"SI/FC"});
                }
                
                # Infos SIsd
                my @data_si_sd = ();
                if ( $h_data->{"sisd"}->{"regulation"} ) {
                    if($est_paire){
                        foreach( @{$h_data->{"sisd"}->{"SIs"}} ){ $_ = round($_, 2); }
                        @data_si_sd = ($h_data->{"sisd"}->{"regulation"}, @{$h_data->{"sisd"}->{"SIs"}}, round($h_data->{"sisd"}->{"si"}, 2), round($h_data->{"sisd"}->{"pval"}, 5), $h_data->{"sisd"}->{"SI/FC"});
                    }else{
                        @data_si_sd = ($h_data->{"sisd"}->{"regulation"}, round($h_data->{"sisd"}->{"si"}, 2), $h_data->{"sisd"}->{"SI/FC"});
                    }
                }else{
                    @data_si_sd = ("-", "-", "-", "-", "-", "-", "-");
                }
                
                # Infos psi
                my @data_psi = ();
                if ( $h_data->{"psi"}->{"regulation"} ) {
                    if($est_paire){
                        @data_psi = ($h_data->{"psi"}->{"regulation"}, round($h_data->{"psi"}->{"control"}, 2), round($h_data->{"psi"}->{"sd_control"}, 2), round($h_data->{"psi"}->{"test"}, 2), round($h_data->{"psi"}->{"sd_test"}, 2), round($h_data->{"psi"}->{"fc"}, 2), round($h_data->{"psi"}->{"sd_fc"}, 2), round($h_data->{"psi"}->{"pval"}, 2), $h_data->{"psi"}->{"psi/FC"});
                    }else{
                        @data_psi = ($h_data->{"psi"}->{"regulation"}, round($h_data->{"psi"}->{"control"}, 2), round($h_data->{"psi"}->{"test"}, 2), round($h_data->{"psi"}->{"fc"}, 2), $h_data->{"psi"}->{"psi/FC"});
                    }
                }else{
                    @data_psi = ("-", "-", "-", "-", "-", "-", "-", "-", "-");
                }
                
                # Pourcentage ch_sondes
                my $select_ch_probes = $probes_db -> prepare (
                    "SELECT count(probe_id)
                    FROM $table_sondes 
                    WHERE gene_id = $gene_id
                    AND align = 'as'
                    AND entite_id = ".$h_carac_entite->{"id"}."
                    AND entite_type = ".$h_carac_entite->{"num_type"}."
                    AND nb_occ > 1"
                );
                $select_ch_probes -> execute;
                my $nb_sondes_ch = $select_ch_probes -> fetchrow_array;
                $select_ch_probes -> finish;
                my $pourcentage_sondes_ch = round(($nb_sondes_ch/($h_data->{"carac"}->{"nb_sondes"}+$nb_sondes_ch))*100, 2);

                # Trouvés avec analyses
                my $str_found_si   = ($h_data->{"found"}->{"si"} == 1) ? "x" : " ";
                my $str_found_sisd = ($h_data->{"found"}->{"sisd"} == 1) ? "x" : " ";
                my $str_found_psi  = ($h_data->{"found"}->{"psi"} == 1) ? "x" : " ";
                
                # Ecriture dans le fichier excel
                my @data = ($num_gene, $str_found_si, $str_found_sisd, $str_found_psi, @data_gene, @data_entite, @data_si, @data_si_sd, @data_psi, $pourcentage_sondes_ch);

                &FonctionsXls::ecriture(\@data, $feuille, $num_ligne, $format);
            
                # On incrémente le num de la ligne (= nb entités)
                $num_ligne++;
            
            }

        }
    
    }


    return ($num_ligne, $num_gene);

}
# ------------------------------------------------------------------ #
sub comptabilisation_resultats {

    my ($is_fdr, $is_bon_fc, $gene_id, $h_data) = @_;
    
    my $hash_a_traiter = ();
    my $hash_gene = ();
    if (!$is_fdr){
        $hash_a_traiter = ( $is_bon_fc ) ? $h_resultats_no_fdr_bon_fc : $h_resultats_no_fdr_mauv_fc ;
        $hash_gene      = $h_no_fdr_genes_totaux;
    }else{
        $hash_a_traiter = ( $is_bon_fc ) ? $h_resultats_fdr_bon_fc : $h_resultats_fdr_mauv_fc ;
        $hash_gene      = $h_no_fdr_genes_totaux;
    }

    $hash_gene->{$gene_id}++;
    
    cpt_analyse($hash_a_traiter, $h_data, "si");
    cpt_analyse($hash_a_traiter, $h_data, "sisd");
    cpt_analyse($hash_a_traiter, $h_data, "psi");
    
}
# ------------------------------------------------------------------ #
sub cpt_analyse {

    my ($hash_a_traiter, $h_data, $analyse) = @_;
    
    if ($h_data->{"found"}->{$analyse} == 1){
    
        $hash_a_traiter->{$analyse}->{"entites"}->{"total"}++;
        $hash_a_traiter->{$analyse}->{"genes"}->{"total"}++;
        
        if( $h_data->{$analyse}->{"regulation"} eq "up" ) {
            $hash_a_traiter->{$analyse}->{"entites"}->{"up"}++;
            $hash_a_traiter->{$analyse}->{"genes"}->{"up"}++;
        }else{
            $hash_a_traiter->{$analyse}->{"entites"}->{"down"}++;
            $hash_a_traiter->{$analyse}->{"genes"}->{"down"}++;
        }

    }
    

}
