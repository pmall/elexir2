#!/usr/bin/perl
use warnings;
use strict;
use FindBin qw($Bin);
use DBI;
use File::Path qw(make_path);
use Spreadsheet::WriteExcel;

require $FindBin::Bin . '/../fonctions';

# ==============================================================================
# Parametres
# ==============================================================================

# On récupère l'id du projet a analyser
my $id_analyse = shift @ARGV || die('Vous devez passer l\'id d\'une analyse en paramètre');

# On défini les identifiants pour la bdd
my $db_host = 'localhost';
my $db_name = 'elexir2';
my $db_user = 'elexir2';
my $db_pass = 'pandas';

# -- Paramètres de sélection pour les résulats -- #
my $seuil_fold			= 0.263034406;
my $seuil_pval			= 0.05;
my $seuil_fiabilite_fcGene	= 2;

# Repertoire contenant les fichiers excel
my $dir_xls = '/data/elexir/reports';

# ==============================================================================
# Connection à elexir et préparation de la requete pour les infos de l'analyse
# ==============================================================================

my $dbh_elexir = DBI->connect(
	'DBI:mysql:' . $db_name . ':' . $db_host,
	$db_user,
	$db_pass
);

# On selectionne les infos de l'analyse
my $select_infos_analyse_sth = $dbh_elexir->prepare(
	"SELECT p.id AS id_project, a.name, p.organism, a.type,
	COUNT(DISTINCT ca.name) AS nb_rep_cont, COUNT(DISTINCT cb.name) AS nb_rep_test
	FROM analyses AS a, projects AS p, groups AS la, groups AS lb, chips AS ca, chips AS cb
	WHERE a.id_project = p.id
	AND a.id = la.id_analysis
	AND a.id = lb.id_analysis
	AND la.letter = 'A'
	AND lb.letter = 'B'
	AND p.id = ca.id_project
	AND p.id = cb.id_project
	AND la.`condition` = ca.`condition`
	AND lb.`condition` = cb.`condition`
	AND a.id = ?
	GROUP BY p.id"
);

# ==============================================================================
# On récupère les infos de l'analyse
# ==============================================================================

$select_infos_analyse_sth->execute($id_analyse);

my $infos_analyse = $select_infos_analyse_sth->fetchrow_hashref;

die('L\'id de l\'analyse n\'est pas valide.') if(!$infos_analyse);

# on crée les variables du script qui déendent de l'analyse
my $base_fasterdb = get_base_fasterdb($infos_analyse->{'organism'});
my $champ_orthologue = ($infos_analyse->{'organism'} eq 'humain') ? 'genes_humains' : 'genes_souris';
my $table_trans = get_table_transcription($infos_analyse->{'id_project'}, $id_analyse);
my $dir_sortie = $dir_xls . '/' . $infos_analyse->{'id_project'} . '/' . $id_analyse;
my $fichier_sortie = $dir_sortie . '/' . $infos_analyse->{'name'} . '_transcription.xls';

# ==============================================================================
# On se connecte a fasterdb et on prépare les requetes
# ==============================================================================

my $dbh_fasterdb = DBI->connect(
	'DBI:mysql:' . $base_fasterdb . ':' . $db_host,
	$db_user,
	$db_pass
);

my $select_genes_sth = $dbh_elexir->prepare(
	"SELECT gene_id, trans_fc, trans_pval, trans_adjp, trans_nb_sondes, trans_nb_exons
	FROM $table_trans
	WHERE abs(trans_fc) >= ?"
);

my $select_infos_gene_sth = $dbh_fasterdb->prepare(
	"SELECT stable_id_ensembl, official_symbol, description,
	chromosome, start_sur_chromosome, end_sur_chromosome, strand
	FROM genes
	WHERE id = ?"
);

my $select_orthologues_sth = $dbh_fasterdb->prepare(
	"SELECT genes_humains, genes_souris
	FROM genes_orthologues
	WHERE $champ_orthologue = ?"
);

# ==============================================================================
# Initialisation fichier excel
# ==============================================================================

# On crée le répertoire de sortie au cas ou il existe pas
make_path($dir_sortie);

# On crée un fichier excel
my $xlsh = Spreadsheet::WriteExcel->new($fichier_sortie);

# On ajoute les pages
my $f_resume			= $xlsh->add_worksheet('Resume de l\'analyse');
my $f_transcription_no_fdr	= $xlsh->add_worksheet('SANS correction pvals');
my $f_transcription_fdr		= $xlsh->add_worksheet('AVEC correction pvals');

# On défini les couleurs
my $couleur_entete		= $xlsh->set_custom_color(39, 189, 189, 189);
my $couleur_up			= $xlsh->set_custom_color(40, 255, 204, 153);
my $couleur_down		= $xlsh->set_custom_color(41, 204, 255, 204);

# On définit les format d'affichage
my $format_resume_titre		= $xlsh->add_format(color => 'black', bold => 1, center_across => 1);
my $format_resume_cell		= $xlsh->add_format(color => 'black', bold => 0, center_across => 1);
my $format_cell_no_center	= $xlsh->add_format(color => 'black', bold => 0);
my $format_entete		= $xlsh->add_format(color => 'black', bold => 1, bg_color => $couleur_entete, border => 2, border_color => 'black', center_across => 1);
my $format_up			= $xlsh->add_format(color => 'black', bg_color => $couleur_up, border => 1, border_color => 'black', center_across => 1);
my $format_down			= $xlsh->add_format(color => 'black', bg_color => $couleur_down, border => 1, border_color => 'black', center_across => 1);

# ==============================================================================
# Feuille résumé
# ==============================================================================

# Infos de base
$f_resume->write(0, 0, date(), $format_cell_no_center);
$f_resume->write(2, 0, "Parametres utilises", $format_resume_titre);
$f_resume->write(3, 0, "Seuil fold", $format_resume_titre);
$f_resume->write(3, 1, round(2**$seuil_fold), $format_resume_titre);
$f_resume->write(4, 0, "Seuil p-value", $format_resume_titre);
$f_resume->write(4, 1, $seuil_pval, $format_resume_titre);

# Infos sur les sondes
my $num_ligne = 8;
$f_resume->set_column(0, 0, 25);
$f_resume->set_column(2, 2, 20);
$f_resume->write($num_ligne++, 0, "Sondes et entites analysees", $format_resume_titre);
$num_ligne++;
$f_resume->write($num_ligne++, 0, "Sondes", $format_resume_titre);
$num_ligne++;
$f_resume->write($num_ligne++, 0, "Sur la puce", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Avec gc < 18", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Non ch", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Exprimees", $format_resume_cell);
$num_ligne++;
$f_resume->write($num_ligne++, 0, "Ciblant des entites", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Introniques", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Non utilisees (inter-geniques, chevauchantes, non hybridees...)", $format_cell_no_center);
$num_ligne++;
$f_resume->write($num_ligne++, 0, "Analysables*", $format_resume_cell);
$f_resume->write($num_ligne++, 0, "Analysees*", $format_resume_cell);

# Légende
$f_resume->write(36, 0, "* analysable", $format_cell_no_center);
$f_resume->write(36, 1, "avec sonde : gc < 18, non ch et ciblant une entite", $format_cell_no_center);
$f_resume->write(37, 0, "* analysable", $format_cell_no_center);
$f_resume->write(37, 1, "avec sonde : gc <18, non ch, ciblant une entite et exprimee dans l'experience", $format_cell_no_center);

# ==============================================================================
# Entete des feuilles no fdr et fdr (identique)
# ==============================================================================

# On défini les entetes
my @entete_gene = (
	'Fasterdb id',
	'Link Elexir',
	'Symbol',
	'Name',
	'Human Ensembl id',
	'Mouse Ensembl id',
	'Chr Position',
	'Regulation',
	'FC',
	'Pvalue',
	'Nb probes',
	'Nb exons'
);

# Pour chaque entete
for(my $i = 0; $i < @entete_gene; $i++){

	# On écrit dans les deux feuillets
	$f_transcription_no_fdr->write(0, $i, $entete_gene[$i], $format_entete);
	$f_transcription_fdr->write(0, $i, $entete_gene[$i], $format_entete);

}

# On initialise la largeur des colones (?!)
$f_transcription_no_fdr->set_column(0, 0, 12);
$f_transcription_no_fdr->set_column(1, 1, 12);
$f_transcription_no_fdr->set_column(3, 4, 18);
$f_transcription_no_fdr->set_column(5, 6, 23);
$f_transcription_no_fdr->set_column(7, 7, 10);
$f_transcription_no_fdr->set_column(10, 10, 12);

$f_transcription_fdr->set_column(0, 0, 12);
$f_transcription_fdr->set_column(1, 1, 12);
$f_transcription_fdr->set_column(3, 4, 18);
$f_transcription_fdr->set_column(5, 6, 23);
$f_transcription_fdr->set_column(7, 7, 10);
$f_transcription_fdr->set_column(10, 10, 12);

# ==============================================================================
# On ajoute les gènes dans les feuilles
# ==============================================================================

# On selectionne les gènes
$select_genes_sth->execute($seuil_fold);
my @genes = @{$select_genes_sth->fetchall_arrayref({})};
$select_genes_sth->finish;

# On classe par fold change (par ordre décroissant)
@genes = sort {
	($b->{'trans_fc'} >= 0) <=> ($a->{'trans_fc'} >= 0) # On classe déjà par signe
	||
	abs($b->{'trans_fc'}) <=> abs($a->{'trans_fc'}) # Ensuite par fold
} @genes;

# Nombre genes no fdr et fdr
my $nb_no_fdr = 0;
my $nb_fdr = 0;

# Pour chaque gène
foreach my $gene (@genes){

	# On initialise des infos selon le niveau de régulation
	my $regulation;
	my $fc_gene;
	my $format;

	if($gene->{'trans_fc'} >= 0){

		$regulation = 'up';
		$fc_gene = (2**$gene->{'trans_fc'});
		$format = $format_up;

	}else{

		$regulation = 'down';
		$fc_gene = (1/(2**$gene->{'trans_fc'}));
		$format = $format_down;

	}

	# On récupère les infos du gène
	$select_infos_gene_sth->execute($gene->{'gene_id'});
	my $infos_gene = $select_infos_gene_sth->fetchrow_hashref;
	$select_infos_gene_sth->finish;

	# On selectionne les gènes orthologues
	$select_orthologues_sth->execute($gene->{'stable_id_ensembl'});
	my @orthologues = @{$select_orthologues_sth->fetchall_arrayref({})};
	$select_orthologues_sth->finish;

	# On fait la chaine orthologues de chaque orga
	my $orthologues_humains = join(', ', grep { $_ ne '' } (map { $_->{'genes_humains'} } @orthologues));
	my $orthologues_souris = join(', ', grep { $_ ne '' } (map { $_->{'genes_souris'} } @orthologues));

	# On fait la position chromosomique
	my $strand = ($infos_gene->{'strand'} eq '1') ? '+' : '-';

	my $pos_chrom = 'chr' . $infos_gene->{'chromosome'} . ':' .
		$infos_gene->{'start_sur_chromosome'} . '-' .
		$infos_gene->{'end_sur_chromosome'} . ':' .
		$strand;

	# Lien pour elexir
	my $lien_elexir = 'http://172.21.100.5';

	# On fait la liste a afficher
	my @data = (
		$gene->{'gene_id'},
		$lien_elexir,
		$infos_gene->{'official_symbol'},
		$infos_gene->{'description'},
		$orthologues_humains,
		$orthologues_souris,
		$pos_chrom,
		$regulation,
		round($fc_gene),
		'pval',
		$gene->{'trans_nb_sondes'},
		$gene->{'trans_nb_exons'}
	);

	# On ajoute dans la feuille no fdr
	if($gene->{'trans_pval'} <= $seuil_pval){

		$nb_no_fdr++;

		$data[9] = round($gene->{'trans_pval'});

		for(my $j = 0; $j < @data; $j++){

			$f_transcription_no_fdr->write(
				$nb_no_fdr,
				$j,
				$data[$j],
				$format
			);

		}

	}

	# On ajoute dans la feuille fdr
	if($gene->{'trans_adjp'} <= $seuil_pval){

		$nb_fdr++;

		$data[9] = round($gene->{'trans_adjp'});

		for(my $j = 0; $j < @data; $j++){

			$f_transcription_fdr->write(
				$nb_fdr,
				$j,
				$data[$j],
				$format
			);

		}

	}

}
